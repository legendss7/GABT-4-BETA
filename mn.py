import streamlit as st
import pandas as pd
import numpy as np
import time

# --- 1. CONFIGURACI√ìN E INICIALIZACI√ìN ---
st.set_page_config(layout="wide", page_title="Bater√≠a de Aptitudes GATB Profesional")

# Colocamos un ancla invisible al inicio de la p√°gina para referencia, aunque el scroll se modificar√°.
st.html('<a id="top-anchor"></a>')

# Mapeo de Aptitudes (se mantiene)
APTITUDES_MAP = {
    "Razonamiento General": {"code": "G", "color": "#1f77b4"}, # Azul
    "Razonamiento Verbal": {"code": "V", "color": "#ff7f0e"}, # Naranja
    "Razonamiento Num√©rico": {"code": "N", "color": "#2ca02c"}, # Verde
    "Razonamiento Espacial": {"code": "S", "color": "#d62728"}, # Rojo
    "Velocidad Perceptiva": {"code": "P", "color": "#9467bd"}, # Morado
    "Precisi√≥n Manual": {"code": "Q", "color": "#8c564b"}, # Marr√≥n
    "Coordinaci√≥n Manual": {"code": "K", "color": "#e377c2"}, # Rosa
    "Atenci√≥n Concentrada": {"code": "A", "color": "#7f7f7f"}, # Gris
    "Razonamiento Mec√°nico": {"code": "M", "color": "#bcbd22"}, # Oliva
    "Razonamiento Abstracto": {"code": "R", "color": "#17becf"}, # Cian
    "Razonamiento Clerical": {"code": "C", "color": "#98df8a"}, # Verde Menta
    "Razonamiento T√©cnico": {"code": "T", "color": "#ff9896"}, # Rojo Claro
}
AREAS = list(APTITUDES_MAP.keys())
N_PREGUNTAS_POR_AREA = 12

# --- SOLUCI√ìN SCROLL MODIFICADA (NO AL TOP ABSOLUTO) ---
def scroll_to_not_top():
    """
    Injecta JS para forzar el scroll a una posici√≥n que NO es el top (ej. 400px abajo).
    Esto evita subir agresivamente al inicio de la p√°gina.
    """
    js_code = """
        <script>
            setTimeout(function() {
                // Scroll a una posici√≥n fija (ej. 400px) para evitar el tope absoluto.
                window.parent.scrollTo({ top: 400, behavior: 'auto' });
                
                // Intento alternativo para contenedores de Streamlit
                var mainContent = window.parent.document.querySelector('[data-testid="stAppViewContainer"]');
                if (mainContent) {
                    mainContent.scrollTo({ top: 400, behavior: 'auto' });
                }
            }, 250);
        </script>
        """
    st.html(js_code)


# Clasificaci√≥n y Calificaci√≥n Global (se mantiene la l√≥gica)
def clasificar_percentil(porcentaje):
    if porcentaje >= 90: return 96, "Superior (90-99)"
    elif porcentaje >= 80: return 88, "Alto (80-89)"
    elif porcentaje >= 60: return 70, "Promedio Alto (60-79)"
    elif porcentaje >= 40: return 50, "Promedio (40-59)"
    elif porcentaje >= 20: return 30, "Promedio Bajo (20-39)"
    elif porcentaje >= 10: return 15, "Bajo (10-19)"
    else: return 5, "Muy Bajo (0-9)"

def calificar_global(avg_percentil):
    if avg_percentil >= 85: return "Potencial Ejecutivo üåü", "El perfil indica un potencial excepcionalmente alto y equilibrado para roles directivos, estrat√©gicos y de alta complejidad. Capacidad de aprendizaje superior y adaptaci√≥n r√°pida a cualquier entorno.", "#008000"
    elif avg_percentil >= 65: return "Nivel Profesional Avanzado üèÜ", "El perfil es s√≥lido, con fortalezas claras y un buen balance aptitudinal. Excelente para roles t√©cnicos especializados, de gesti√≥n de proyectos y consultor√≠a.", "#4682b4"
    elif avg_percentil >= 40: return "Perfil Competitivo üíº", "El perfil se sit√∫a en el promedio superior, demostrando suficiencia en todas las √°reas. Apto para la mayor√≠a de roles operativos y de coordinaci√≥n. Requiere enfoque en el desarrollo de fortalezas clave.", "#ff8c00"
    else: return "Per√≠odo de Desarrollo üõ†Ô∏è", "El perfil requiere un per√≠odo de enfoque intensivo en el desarrollo de aptitudes clave. Se recomienda comenzar con roles de soporte y entrenamiento continuo.", "#dc143c"

# --- GENERACI√ìN DE PREGUNTAS (Se mantiene, solo se a√±ade el Dataframe) ---
def generate_gatb_questions():
    """Genera 144 preguntas simuladas para el test GATB con redacci√≥n revisada."""
    # (El contenido detallado de las 144 preguntas se omite aqu√≠ por espacio, 
    # pero se asume que la estructura de 'test_data' es la misma que la provista
    # en la iteraci√≥n anterior, con 12 items por √°rea y redacci√≥n revisada.)
    
    # Datos espec√≠ficos para cada factor (ejemplos funcionales con redacci√≥n revisada)
    test_data = {
        "Razonamiento General": {
            "code": "G",
            "type": "Analog√≠as y Series L√≥gicas",
            "items": [
                ("HACHA es a MADERA como CINCEL es a...", {"a": "Pintura", "b": "Metal", "c": "Escultura", "d": "Papel"}, "c"),
                ("Complete la serie: $2, 5, 11, 23, ?$", {"a": "45", "b": "47", "c": "49", "d": "51"}, "b"),
                ("D√≠a es a LUZ como Noche es a...", {"a": "Luna", "b": "Estrellas", "c": "Oscuridad", "d": "Silencio"}, "c"),
                ("Si ARBOL vale $7$ y FLOR vale $6$, ¬øcu√°nto vale AGUA?", {"a": "5", "b": "6", "c": "7", "d": "8"}, "a"),
                ("¬øCu√°l palabra no pertenece al grupo? Piano, Viol√≠n, Guitarra, Tambor, Trompeta.", {"a": "Piano", "b": "Viol√≠n", "c": "Tambor", "d": "Trompeta"}, "c"),
                ("Complete la serie: $8, 11, 15, 20, ?$", {"a": "26", "b": "27", "c": "28", "d": "29"}, "a"),
                ("PILOTO es a AVI√ìN como CAPIT√ÅN es a...", {"a": "Barco", "b": "Puerto", "c": "Tripulaci√≥n", "d": "Mar"}, "a"),
                ("Figura geom√©trica: ¬øQu√© sigue? Cuadrado, Tri√°ngulo, C√≠rculo, Cuadrado, Tri√°ngulo, ?", {"a": "Cuadrado", "b": "C√≠rculo", "c": "Rombo", "d": "Estrella"}, "b"),
                ("La excepci√≥n: Gato, Perro, Vaca, Pollo, Caballo.", {"a": "Gato", "b": "Perro", "c": "Vaca", "d": "Pollo"}, "d"),
                ("Si $3=9$ y $4=16$, ¬øqu√© es $7$?", {"a": "49", "b": "21", "c": "14", "d": "35"}, "a"),
                ("Libro es a P√ÅGINA como √ÅRBOL es a...", {"a": "Ra√≠z", "b": "Bosque", "c": "Hoja", "d": "Fruto"}, "c"),
                ("Contin√∫e la secuencia: $Z, X, V, T, ?$", {"a": "S", "b": "R", "c": "Q", "d": "P"}, "b"),
            ]
        },
        "Razonamiento Verbal": {
            "code": "V",
            "type": "Vocabulario: Sin√≥nimos y Ant√≥nimos",
            "items": [
                ("Sin√≥nimo de 'EF√çMERO'.", {"a": "Duradero", "b": "Fugaz", "c": "Eterno", "d": "Grande"}, "b"),
                ("Ant√≥nimo de 'OPULENCIA'.", {"a": "Riqueza", "b": "Afluencia", "c": "Pobreza", "d": "Magnificencia"}, "c"),
                ("Sin√≥nimo de 'PERSPICACIA'.", {"a": "Torpeza", "b": "Clarividencia", "c": "Obstrucci√≥n", "d": "Duda"}, "b"),
                ("Ant√≥nimo de 'TACITURNO'.", {"a": "Melanc√≥lico", "b": "Alegre", "c": "Callado", "d": "Reservado"}, "b"),
                ("Sin√≥nimo de 'CONCISO'.", {"a": "Extenso", "b": "Breve", "c": "Vago", "d": "Detallado"}, "b"),
                ("Ant√≥nimo de 'DILECTO'.", {"a": "Querido", "b": "Estimado", "c": "Odiado", "d": "Predilecto"}, "c"),
                ("Sin√≥nimo de 'SUTILEZA'.", {"a": "Brusquedad", "b": "Delicadeza", "c": "Groser√≠a", "d": "Fuerza"}, "b"),
                ("Ant√≥nimo de 'INSIPIDEZ'.", {"a": "Sabor", "b": "Hast√≠o", "c": "Neutralidad", "d": "Suavidad"}, "a"),
                ("Sin√≥nimo de 'VEHEMENTE'.", {"a": "Calmado", "b": "Ap√°tico", "c": "Impetuoso", "d": "Lento"}, "c"),
                ("Ant√≥nimo de 'PROFANAR'.", {"a": "Desacralizar", "b": "Respetar", "c": "Violentar", "d": "Degradar"}, "b"),
                ("Sin√≥nimo de 'PRISTINO'.", {"a": "Antiguo", "b": "Novedoso", "c": "Corrupto", "d": "Inicial"}, "d"),
                ("Ant√≥nimo de 'INOCUO'.", {"a": "Inofensivo", "b": "Da√±ino", "c": "Benigno", "d": "Suave"}, "b"),
            ]
        },
        "Razonamiento Num√©rico": {
            "code": "N",
            "type": "C√°lculo y Problemas Aritm√©ticos",
            "items": [
                ("Resuelva: $72 \div 9 + 4 \times 3 - 10$.", {"a": "6", "b": "10", "c": "12", "d": "14"}, "b"),
                ("Si una camisa cuesta $45 y tiene un $20\%$ de descuento, ¬øcu√°l es su precio final?", {"a": "$36", "b": "$38", "c": "$40", "d": "$42"}, "a"),
                ("¬øCu√°l es el siguiente n√∫mero primo despu√©s de $29$?", {"a": "31", "b": "33", "c": "35", "d": "37"}, "a"),
                ("Calcule el promedio de: $15, 25, 10, 30$.", {"a": "18", "b": "20", "c": "22", "d": "25"}, "b"),
                ("¬øQu√© n√∫mero completa la fracci√≥n? $\\frac{3}{4} = \\frac{?}{16}$", {"a": "9", "b": "12", "c": "15", "d": "18"}, "b"),
                ("Un coche viaja a $60$ km/h. ¬øCu√°nto tardar√° en recorrer $210$ km?", {"a": "3 horas", "b": "3.5 horas", "c": "4 horas", "d": "4.5 horas"}, "b"),
                ("Resuelva: $\\frac{1}{2} + \\frac{1}{4}$.", {"a": "1/3", "b": "3/4", "c": "2/6", "d": "1/8"}, "b"),
                ("Si tiene $5$ cajas con $8$ manzanas cada una, y regala $12$ manzanas, ¬øcu√°ntas le quedan?", {"a": "28", "b": "32", "c": "40", "d": "24"}, "a"),
                ("¬øQu√© n√∫mero es el doble de $14$ y la mitad de $56$?", {"a": "24", "b": "28", "c": "32", "d": "36"}, "b"),
                ("Si $x-5 = 12$, ¬øcu√°nto es $x+5$?", {"a": "17", "b": "22", "c": "27", "d": "10"}, "b"),
                ("Un reloj adelanta $3$ minutos cada hora. ¬øCu√°nto adelanta en $5$ horas?", {"a": "12 minutos", "b": "15 minutos", "c": "18 minutos", "d": "20 minutos"}, "b"),
                ("Resuelva: $10^2 - 5^2$.", {"a": "50", "b": "75", "c": "100", "d": "25"}, "b"),
            ]
        },
        "Razonamiento Espacial": {
            "code": "S",
            "type": "Visualizaci√≥n y Rotaci√≥n 3D",
            "items": [
                ("¬øQu√© figura resulta al rotar $90^{\circ}$ a la derecha un cuadrado con un tri√°ngulo sombreado en la esquina superior izquierda?", {"a": "Opci√≥n A (Tri√°ngulo en esquina superior derecha)", "b": "Opci√≥n B (Tri√°ngulo en esquina inferior derecha)", "c": "Opci√≥n C (Tri√°ngulo en esquina inferior izquierda)", "d": "Opci√≥n D (Tri√°ngulo en esquina superior izquierda)"}, "b"),
                ("Si se pliega un cubo desde su plantilla, ¬øqu√© cara queda opuesta a la cara con un c√≠rculo?", {"a": "Una estrella", "b": "Un tri√°ngulo", "c": "Un cuadrado", "d": "Un punto"}, "a"),
                ("Imagine una $L$ may√∫scula. Si la gira $180^{\circ}$, ¬øc√≥mo se ve?", {"a": "L invertida", "b": "L reflejada", "c": "J", "d": "Una $T$"}, "c"),
                ("De las siguientes figuras $A, B, C, D$, ¬øcu√°l no se puede obtener girando la figura $A$?", {"a": "Figura B", "b": "Figura C", "c": "Figura D", "d": "Todas se pueden obtener"}, "c"),
                ("Si un reloj est√° a las 3:00, ¬øqu√© hora marcar√≠a en un espejo?", {"a": "9:00", "b": "3:00", "c": "6:00", "d": "12:00"}, "a"),
                ("Identifique el objeto 3D que se ve desde arriba como un c√≠rculo y desde el lado como un cuadrado.", {"a": "Cono", "b": "Cilindro", "c": "Esfera", "d": "Cubo"}, "b"),
                ("¬øCu√°l es la vista frontal de una pir√°mide de base cuadrada?", {"a": "Cuadrado", "b": "Tri√°ngulo", "c": "Trapecio", "d": "Pent√°gono"}, "b"),
                ("Si dobla una hoja a la mitad y luego la corta en el centro, ¬øcu√°ntos agujeros obtiene al desdoblarla?", {"a": "1", "b": "2", "c": "3", "d": "4"}, "b"),
                ("¬øQu√© figura sigue en la secuencia de pliegues? Pliegue horizontal $\to$ Pliegue vertical $\to$ Corte en diagonal.", {"a": "Tri√°ngulo", "b": "C√≠rculo", "c": "Rombo", "d": "Dos tri√°ngulos"}, "c"),
                ("Si un punto est√° en la parte inferior de una figura, ¬ød√≥nde estar√° despu√©s de rotarla $270^{\circ}$ a la izquierda?", {"a": "Parte superior", "b": "Parte derecha", "c": "Parte izquierda", "d": "Parte inferior"}, "b"),
                ("¬øCu√°l figura ($A, B, C, D$) es la reflexi√≥n de la figura $A$?", {"a": "Figura A (misma)", "b": "Figura B", "c": "Figura C", "d": "Figura D (reflexi√≥n)"}, "d"),
                ("Si un objeto tiene $5$ caras, ¬øcu√°l podr√≠a ser?", {"a": "Cubo", "b": "Pir√°mide de base triangular", "c": "Prisma rectangular", "d": "Tubo"}, "b"),
            ]
        },
        "Velocidad Perceptiva": {
            "code": "P",
            "type": "Comparaci√≥n R√°pida de Pares",
            "items": [
                ("Identifique el par IGUAL: A) $7T84P/7T84R$, B) $5E62M/5E62M$, C) $P01V9/P0IV9$, D) $WX3ZA/WX3ZE$", {"a": "A", "b": "B", "c": "C", "d": "D"}, "b"),
                ("Identifique el par DIFERENTE: A) $93X61/93X61$, B) $LMN77/LMN77$, C) $F2Y5Q/F2Y5R$, D) $B8D1K/B8D1K$", {"a": "A", "b": "B", "c": "C", "d": "D"}, "c"),
                ("¬øCu√°l es el par de n√∫meros telef√≥nicos id√©nticos? (A) $555-4321$, (B) $555-4321$, (C) $555-1234$, (D) $555-4321$", {"a": "A y C", "b": "B y D", "c": "A y B", "d": "A, B y D"}, "d"),
                ("¬øCu√°ntas veces aparece el c√≥digo 'TRX' en esta lista? TRX, TRW, T RX, TYX, TRX, TRX.", {"a": "2", "b": "3", "c": "4", "d": "5"}, "b"),
                ("Encuentre el par exacto: A) $G2H5K - G2H5K$, B) $1A3B5 - 1A3BS$, C) $PQR9 - PQR09$, D) $8Y7Z - 8YIZ$", {"a": "A", "b": "B", "c": "C", "d": "D"}, "a"),
                ("¬øCu√°l nombre est√° mal escrito si el original es 'Hern√°ndez Gonz√°lez'? A) Fernandez Gonz√°lez, B) Hern√°ndez Gonzalez, C) Hern√°ndez Gonz√°lez, D) Hern√°ndez Gnzalez", {"a": "A", "b": "B", "c": "C", "d": "D"}, "d"),
                ("Identifique el error en la secuencia de d√≠gitos: $12345678901234567890123456789$.", {"a": "Falta el $1$", "b": "Hay un $9$ repetido", "c": "Est√° incompleta", "d": "No hay error visible"}, "d"),
                ("Encuentre la direcci√≥n que no se repite: A) Calle Sol 15, B) Calle Sol 15, C) Av. Luna 22, D) Calle Sol 15", {"a": "A", "b": "B", "c": "C", "d": "D"}, "c"),
                ("¬øQu√© c√≥digo es diferente? ZB890, ZB89O, ZB890, ZB890.", {"a": "ZB890", "b": "ZB89O", "c": "Son iguales", "d": "ZB890 (el tercero)"}, "b"),
                ("Marque el √∫nico par que son exactamente iguales: (A) $3K7R / 3K7R$, (B) $\$50.00 / \$500.0$, (C) $M1XQ / MI XQ$, (D) $9A2B / 9A2V$", {"a": "A", "b": "B", "c": "C", "d": "D"}, "a"),
                ("¬øCu√°l factura es id√©ntica? A) $F45-A1 / F45-A1$, B) $F45-A1 / F45-A7$, C) $F45-A1 / F4S-A1$, D) $F45-A1 / F45-1A$", {"a": "A", "b": "B", "c": "C", "d": "D"}, "a"),
                ("Encuentre el grupo donde todos los elementos son id√©nticos: (A) L10, L10, L11. (B) R9W, R9W, R9W. (C) T2Z, T2Z, T3Z.", {"a": "A", "b": "B", "c": "C", "d": "Ninguno"}, "b"),
            ]
        },
        "Precisi√≥n Manual": {
            "code": "Q",
            "type": "Detalle Fino y Coordinaci√≥n (Simulado)",
            "items": [
                ("En un plano de circuito, ¬øcu√°l es el s√≠mbolo de una resistencia?", {"a": "Rect√°ngulo con l√≠neas", "b": "C√≠rculo con cruz", "c": "Dos l√≠neas paralelas", "d": "Flecha en diagonal"}, "a"),
                ("Para ensamblar un reloj de pulsera, ¬øqu√© herramienta requiere mayor control de fuerza m√≠nima?", {"a": "Pinzas", "b": "Destornillador grande", "c": "Martillo", "d": "Llave inglesa"}, "a"),
                ("Si un punto est√° ligeramente fuera de un c√≠rculo, ¬øqu√© acci√≥n es m√°s dif√≠cil de realizar con precisi√≥n?", {"a": "Mover el punto adentro", "b": "Mover el punto afuera", "c": "Dibujar otro c√≠rculo", "d": "Borrar el punto"}, "a"),
                ("Identifique el error de alineaci√≥n m√°s peque√±o en el siguiente diagrama de barras ($A, B, C, D$).", {"a": "Barra A", "b": "Barra B", "c": "Barra C", "d": "Barra D (ligero desnivel)"}, "d"),
                ("Al escribir a mano, la precisi√≥n manual es necesaria para controlar...", {"a": "El vocabulario", "b": "La gram√°tica", "c": "El tama√±o de la letra", "d": "La velocidad de lectura"}, "c"),
                ("¬øQu√© representa la peque√±a desviaci√≥n en la l√≠nea roja de este gr√°fico?", {"a": "Una tendencia", "b": "Un error de medici√≥n", "c": "Un valor m√°ximo", "d": "Un promedio"}, "b"),
                ("Si necesita pegar una etiqueta de $1$mm $\\times 1$mm, ¬øqu√© aptitud es m√°s relevante?", {"a": "Fuerza", "b": "Velocidad", "c": "Precisi√≥n", "d": "Razonamiento"}, "c"),
                ("En una muestra de tejido, ¬øqu√© detalle requiere mayor precisi√≥n al ser examinado con un microscopio?", {"a": "El color general", "b": "La forma de la c√©lula", "c": "El brillo de la muestra", "d": "El tama√±o del campo visual"}, "b"),
                ("¬øQu√© acci√≥n en la siguiente secuencia requiere m√°s precisi√≥n: A) Cortar, B) Llenar, C) Lijar, D) Pegar un borde fino?", {"a": "A", "b": "B", "c": "C", "d": "D"}, "d"),
                ("Para un cirujano, la Precisi√≥n Manual es m√°s importante que la Coordinaci√≥n Manual para...", {"a": "Correr a urgencias", "b": "Suturar un vaso fino", "c": "Levantar un peso", "d": "Hablar con el paciente"}, "b"),
                ("En la impresi√≥n, la nitidez de un borde es una medida de...", {"a": "Velocidad", "b": "Precisi√≥n", "c": "Color", "d": "Contraste"}, "b"),
                ("Si debe mover un objeto diminuto con un palillo, ¬øqu√© cualidad de movimiento es clave?", {"a": "Rapidez impulsiva", "b": "Movimiento tembloroso", "c": "Control sutil", "d": "Fuerza bruta"}, "c"),
            ]
        },
        "Coordinaci√≥n Manual": {
            "code": "K",
            "type": "Control Ojo-Mano y Movimiento (Simulado)",
            "items": [
                ("Al conducir un veh√≠culo, ¬øqu√© acci√≥n combina mejor la Coordinaci√≥n Manual?", {"a": "Mirar el paisaje", "b": "Acelerar y girar el volante", "c": "Escuchar m√∫sica", "d": "Detener el motor"}, "b"),
                ("¬øQu√© secuencia de movimientos requiere un ritmo continuo y suave?", {"a": "Martillar un clavo", "b": "Escribir un texto largo en teclado", "c": "Atarse los zapatos", "d": "Levantar una caja"}, "b"),
                ("Para trazar una l√≠nea curva perfecta con una pluma, ¬øqu√© factor es predominante?", {"a": "Fuerza del brazo", "b": "Coordinaci√≥n Ojo-Mano", "c": "Rapidez mental", "d": "Peso del papel"}, "b"),
                ("En un videojuego, la habilidad de seguir un objetivo en movimiento mientras se dispara requiere:", {"a": "Memoria", "b": "Coordinaci√≥n Manual", "c": "Razonamiento verbal", "d": "Toma de decisiones"}, "b"),
                ("Si ensambla un mueble, ¬øqu√© paso exige m√°s Coordinaci√≥n Manual: A) Clasificar piezas, B) Leer el manual, C) Insertar un tornillo mientras sostiene la pieza, D) Pintar el mueble?", {"a": "A", "b": "B", "c": "d", "d": "C"}, "d"),
                ("¬øCu√°l actividad motriz es puramente secuencial y r√≠tmica?", {"a": "Levantar pesas", "b": "Caminar", "c": "Lanzar un dardo", "d": "Barrer el suelo"}, "d"),
                ("La capacidad de mantener el equilibrio mientras se manipula un objeto pesado es un ejemplo de:", {"a": "Fuerza bruta", "b": "Precisi√≥n Manual", "c": "Coordinaci√≥n Global", "d": "Agilidad mental"}, "c"),
                ("Si un pintor de brocha gorda cubre una pared, ¬øqu√© movimiento requiere la mejor Coordinaci√≥n?", {"a": "Abrir el bote de pintura", "b": "Aplicar la pintura en trazos uniformes", "c": "Limpiar el pincel", "d": "Mezclar colores"}, "b"),
                ("¬øQu√© requiere m√°s Coordinaci√≥n Manual en el boxeo?", {"a": "Respirar", "b": "Bloquear un golpe", "c": "Lanzar un jab y recuperarse", "d": "Mantener la postura"}, "c"),
                ("Para un guitarrista, la acci√≥n de la mano derecha al rasguear requiere...", {"a": "Concentraci√≥n", "b": "Coordinaci√≥n R√≠tmica", "c": "Fuerza", "d": "Velocidad perceptiva"}, "b"),
                ("De los siguientes, ¬øcu√°l es un acto de Precisi√≥n Manual m√°s que Coordinaci√≥n? A) Escribir en un pizarr√≥n, B) Enhebrar una aguja, C) Jugar al tenis, D) Batear en b√©isbol.", {"a": "A", "b": "B", "c": "C", "d": "D"}, "b"),
                ("La coordinaci√≥n manual se mide t√≠picamente por:", {"a": "El peso que se levanta", "b": "La velocidad del movimiento", "c": "El control y la fluidez del movimiento", "d": "La memoria muscular"}, "c"),
            ]
        },
        "Atenci√≥n Concentrada": {
            "code": "A",
            "type": "Vigilancia y Detecci√≥n de Errores",
            "items": [
                ("¬øCu√°ntas letras 'e' min√∫sculas hay en el siguiente texto? 'El experto examin√≥ el expediente y encontr√≥ que el error se debe a la excesiva envergadura del esfuerzo.'", {"a": "10", "b": "11", "c": "12", "d": "13"}, "c"),
                ("En la lista de c√≥digos, ¬øcu√°l NO es 'X793R'? $X793R, X793R, X793R, X793S$.", {"a": "El primero", "b": "El segundo", "c": "El tercero", "d": "El cuarto"}, "d"),
                ("Cuente el n√∫mero de veces que aparece el d√≠gito '5' en la serie: $125345675895051253$.", {"a": "5", "b": "6", "c": "7", "d": "8"}, "c"),
                ("En la siguiente tabla de nombres y c√≥digos, ¬øcu√°l tiene un error de digitaci√≥n? (A) Juan P. $1234, (B) Mar√≠a L. 1234, (C) Carlos M. 1243, (D) Ana S. 1234$", {"a": "A", "b": "B", "c": "C", "d": "D"}, "c"),
                ("¬øCu√°ntas veces aparece la palabra 'LA' escrita en may√∫sculas? La casa es grande. LA pared es blanca. La l√°mpara, LA mejor. LA ventana.", {"a": "1", "b": "2", "c": "3", "d": "4"}, "c"),
                ("Encuentre la √∫nica l√≠nea donde el $7$ NO es el √∫ltimo d√≠gito: $1357, 2467, 8027, 9136$.", {"a": "1357", "b": "2467", "c": "8027", "d": "9136"}, "d"),
                ("Marque la figura que no coincide con el patr√≥n: Cuadrado, C√≠rculo, Cuadrado, C√≠rculo, Tri√°ngulo.", {"a": "Primer Cuadrado", "b": "Segundo C√≠rculo", "c": "Tri√°ngulo", "d": "Primer C√≠rculo"}, "c"),
                ("¬øCu√°l c√≥digo postal est√° incompleto? A) 28001, B) 2801, C) 28002, D) 28003.", {"a": "A", "b": "B", "c": "C", "d": "D"}, "b"),
                ("Dada la regla: 'solo se aceptan n√∫meros pares', ¬øcu√°l es el error? $2, 4, 6, 9, 10$.", {"a": "2", "b": "6", "c": "9", "d": "10"}, "c"),
                ("¬øCu√°ntos ceros hay en este n√∫mero? $1001000101001000$.", {"a": "8", "b": "9", "c": "10", "d": "7"}, "b"),
                ("Encuentre la palabra mal deletreada: A) Ocurrencia, B) Ocurrancia, C) Ocurrencia, D) Ocurrencia.", {"a": "A", "b": "B", "c": "C", "d": "D"}, "b"),
                ("Si el patr√≥n es $A>B$, ¬øcu√°l es el error? $C>D, F>E, G>H, I>J$.", {"a": "C>D", "b": "F>E", "c": "G>H", "d": "I>J"}, "b"),
            ]
        },
        "Razonamiento Mec√°nico": {
            "code": "M",
            "type": "Principios F√≠sicos y Maquinaria",
            "items": [
                ("En un sistema de poleas, si se duplica el n√∫mero de cuerdas que sostienen la carga, la fuerza necesaria se...", {"a": "Duplica", "b": "Reduce a la mitad", "c": "Mantiene igual", "d": "Triplica"}, "b"),
                ("Si el engranaje $A$ gira en sentido horario, ¬øen qu√© sentido gira el engranaje $B$ conectado directamente a √©l?", {"a": "Horario", "b": "Antihorario", "c": "No gira", "d": "Depende de la velocidad"}, "b"),
                ("Al usar una palanca, para levantar un peso grande con una fuerza peque√±a, se debe:", {"a": "Acercar el punto de apoyo al peso", "b": "Alejar el punto de apoyo del peso", "c": "Usar una palanca m√°s corta", "d": "Aumentar el peso"}, "a"),
                ("¬øQu√© principio rige el funcionamiento de un gato hidr√°ulico?", {"a": "Ley de Newton", "b": "Principio de Bernoulli", "c": "Principio de Pascal", "d": "Ley de Ohm"}, "c"),
                ("Si dos pesos, uno de $10$ kg y otro de $5$ kg, caen desde la misma altura (sin resistencia del aire), ¬øcu√°l toca el suelo primero?", {"a": "El de $10$ kg", "b": "El de $5$ kg", "c": "Ambos al mismo tiempo", "d": "Depende de la forma"}, "c"),
                ("¬øQu√© tipo de energ√≠a almacena un resorte comprimido?", {"a": "Cin√©tica", "b": "Potencial el√°stica", "c": "T√©rmica", "d": "El√©ctrica"}, "b"),
                ("Si la rueda de una bicicleta tiene mayor di√°metro, ¬øqu√© sucede con la velocidad a la misma cadencia (giro de pedales)?", {"a": "Disminuye", "b": "Aumenta", "c": "Se mantiene", "d": "Oscila"}, "b"),
                ("¬øQu√© componente convierte el movimiento lineal en movimiento rotatorio en un motor de combusti√≥n?", {"a": "El cig√ºe√±al", "b": "La biela", "c": "El pist√≥n", "d": "El √°rbol de levas"}, "a"),
                ("Una cu√±a es un ejemplo de:", {"a": "Polea", "b": "Tornillo", "c": "Plano inclinado", "d": "Rueda"}, "c"),
                ("En el agua, ¬øpor qu√© un objeto flota?", {"a": "Densidad del objeto es menor que la del agua", "b": "Es m√°s ligero que el agua", "c": "Tiene forma plana", "d": "Tiene m√°s volumen"}, "a"),
                ("La capacidad de un material de estirarse sin romperse se llama:", {"a": "Dureza", "b": "Tenacidad", "c": "Elasticidad", "d": "Fragilidad"}, "c"),
                ("Para una bisagra de puerta, ¬ød√≥nde se requiere la menor fuerza para mover la puerta?", {"a": "Cerca de la bisagra", "b": "En el centro", "c": "En el borde opuesto a la bisagra", "d": "En la parte superior"}, "c"),
            ]
        },
        "Razonamiento Abstracto": {
            "code": "R",
            "type": "Series de Figuras y Matrices",
            "items": [
                ("La figura que completa la secuencia: Cuadrado (negro) $\\to$ C√≠rculo (blanco) $\\to$ Tri√°ngulo (negro) $\\to$ C√≠rculo (negro) $\\to$ ?", {"a": "Cuadrado (blanco)", "b": "Tri√°ngulo (blanco)", "c": "C√≠rculo (negro)", "d": "Cuadrado (negro)"}, "b"),
                ("¬øQu√© figura es la siguiente? I. Un punto, II. Dos puntos, III. Tres puntos en l√≠nea, IV. Cuatro puntos en cuadrado, V. ?", {"a": "Cinco puntos en pent√°gono", "b": "Cinco puntos en l√≠nea", "c": "Seis puntos en l√≠nea", "d": "Seis puntos en un hex√°gono"}, "a"),
                ("¬øCu√°l es el patr√≥n que falta en la matriz $3 \times 3$?", {"a": "Figura A (combina color/forma)", "b": "Figura B", "c": "Figura C", "d": "Figura D (patr√≥n que falta)"}, "d"),
                ("Identifique la figura intrusa: A) Tri√°ngulo equil√°tero, B) C√≠rculo, C) Cuadrado, D) Rect√°ngulo (lados diferentes).", {"a": "A", "b": "B", "c": "C", "d": "D"}, "b"),
                ("Si $A \\triangle B$ se transforma en $A \\square B$, y $X \\circ Y$ se transforma en $X \\diamond Y$, ¬øen qu√© se transforma $P \\diamond Q$?", {"a": "P $\\circ$ Q", "b": "P $\\triangle$ Q", "c": "P $\\square$ Q", "d": "P $\\times$ Q"}, "a"),
                ("Contin√∫e la serie: $/\backslash, I, \\/, II, /\\, III, ?$", {"a": "IV", "b": "\\/", "c": "//", "d": "III"}, "b"),
                ("El c√≠rculo de la izquierda se mueve al centro y se llena. El cuadrado de la derecha se mueve a la izquierda y se vac√≠a. ¬øCu√°l es el resultado?", {"a": "C√≠rculo lleno a la izquierda, cuadrado vac√≠o a la derecha", "b": "C√≠rculo vac√≠o al centro, cuadrado lleno a la izquierda", "c": "C√≠rculo lleno al centro, cuadrado vac√≠o a la izquierda", "d": "C√≠rculo lleno a la izquierda, cuadrado vac√≠o al centro"}, "c"),
                ("¬øQu√© figura se obtiene al sobreponer las figuras $A$ (rect√°ngulo) y $B$ (c√≠rculo que lo interseca)?", {"a": "C√≠rculo", "b": "Solo rect√°ngulo", "c": "Las dos figuras visibles", "d": "Solo la intersecci√≥n"}, "c"),
                ("Una figura con $4$ lados se convierte en una con $5$. Una con $3$ lados se convierte en una con $4$. Una con $6$ lados se convierte en una con:", {"a": "6 lados", "b": "7 lados", "c": "8 lados", "d": "5 lados"}, "b"),
                ("El punto se mueve $90^{\circ}$ en sentido horario. ¬øCu√°l es el siguiente paso?", {"a": "Arriba a la derecha", "b": "Abajo a la derecha", "c": "Abajo a la izquierda", "d": "Arriba a la izquierda"}, "b"),
                ("¬øCu√°l figura no pertenece? A) Un rayo, B) Una nube, C) Un sol, D) Un coche.", {"a": "A", "b": "B", "c": "C", "d": "D"}, "d"),
                ("Dada la regla: la figura se refleja en el eje $X$. ¬øCu√°l es el resultado de reflejar la figura $Y$?", {"a": "Y reflejada horizontalmente", "b": "Y reflejada verticalmente", "c": "Y rotada", "d": "Y rotada $90^{\circ}$"}, "a"),
            ]
        },
        "Razonamiento Clerical": {
            "code": "C",
            "type": "Clasificaci√≥n, Archivo y Verificaci√≥n",
            "items": [
                ("Ordene alfab√©ticamente por apellido: A) P√©rez, Juan; B) Garc√≠a, Ana; C) L√≥pez, Luis.", {"a": "A, B, C", "b": "B, C, A", "c": "B, A, C", "d": "C, B, A"}, "b"),
                ("¬øCu√°l es el n√∫mero de factura m√°s alto? A) $10245, B) 10542, C) 10425, D) 10524$.", {"a": "A", "b": "B", "c": "C", "d": "D"}, "b"),
                ("¬øQu√© archivo debe ir primero? A) $Z-155$, B) $Z-105$, C) $Y-199$, D) $X-200$.", {"a": "A", "b": "B", "c": "C", "d": "D"}, "d"),
                ("Verifique la consistencia: Tarea A ($15); Tarea B ($20); Tarea C ($15). ¬øCu√°l es la inconsistencia?", {"a": "Tarea A", "b": "Tarea B", "c": "Tarea C", "d": "Ninguna"}, "d"),
                ("Clasifique por fecha (m√°s reciente primero): A) $05/2023, B) 01/2024, C) 12/2023, D) 06/2023$.", {"a": "A, B, C, D", "b": "B, C, D, A", "c": "B, D, C, A", "d": "A, D, C, B"}, "b"),
                ("¬øCu√°l nombre est√° ordenado incorrectamente en una lista alfab√©tica?: √Ålvarez, Castro, G√≥mez, Ruiz, Torres.", {"a": "√Ålvarez", "b": "G√≥mez", "c": "Ruiz", "d": "Torres"}, "d"),
                ("Identifique el c√≥digo que pertenece a la clasificaci√≥n 'Urgente': URG-A1, STD-A1, URG-B2, URG-B1.", {"a": "URG-A1, STD-A1", "b": "URG-A1, URG-B2, URG-B1", "c": "Solo URG-A1", "d": "Todos"}, "b"),
                ("En una tabla de datos, ¬øqu√© campo es m√°s dif√≠cil de verificar clericalmente?", {"a": "ID (n√∫meros)", "b": "Fecha (d√≠a/mes/a√±o)", "c": "Nombre (texto)", "d": "Observaciones (texto largo)"}, "d"),
                ("Ordene num√©ricamente (mayor a menor): $500, 50, 5000, 5$.", {"a": "5, 50, 500, 5000", "b": "5000, 500, 50, 5", "c": "500, 5000, 50, 5", "d": "5000, 50, 500, 5"}, "b"),
                ("¬øCu√°l es el nombre correcto seg√∫n el registro? A) Maria L√≥pez (Registro: Mar√≠a L√≥pez), B) Juan P√©rez (Registro: Juan Perez), C) Ana Gomez (Registro: Ana G√≥mez), D) Todos correctos.", {"a": "A", "b": "B", "c": "C", "d": "D"}, "b"),
                ("¬øCu√°ntos n√∫meros de $4$ d√≠gitos hay en la lista? $1234, 567, 8901, 23456$.", {"a": "1", "b": "2", "c": "3", "d": "4"}, "c"),
                ("Si la regla de archivo es 'Clasificar por primera letra del c√≥digo', ¬øqu√© va despu√©s de $C123$?", {"a": "B999", "b": "C124", "c": "D001", "d": "A500"}, "b"),
            ]
        },
        "Razonamiento T√©cnico": {
            "code": "T",
            "type": "Diagramas de Flujo y Resoluci√≥n de Fallas",
            "items": [
                ("En un diagrama de flujo, ¬øqu√© s√≠mbolo representa una decisi√≥n (S√≠/No)?", {"a": "Rect√°ngulo", "b": "√ìvalo", "c": "Rombo", "d": "Flecha"}, "c"),
                ("¬øCu√°l es el paso l√≥gico para diagnosticar una falla el√©ctrica si el equipo no enciende?", {"a": "Revisar la bater√≠a", "b": "Verificar la conexi√≥n a la fuente de poder", "c": "Desarmar el motor", "d": "Cambiar el interruptor"}, "b"),
                ("Si una m√°quina se sobrecalienta, ¬øqu√© factor debe inspeccionar primero?", {"a": "El cableado interno", "b": "El sistema de enfriamiento (ventilador/radiador)", "c": "El color de la pintura", "d": "El manual de usuario"}, "b"),
                ("En una secuencia de programaci√≥n, si $X=5$ y se ejecuta $X=X+1$, ¬øcu√°l es el nuevo valor de $X$?", {"a": "5", "b": "6", "c": "7", "d": "1"}, "b"),
                ("Dada la secuencia: A) Inspecci√≥n, B) Diagn√≥stico, C) Reparaci√≥n, D) Prueba final. ¬øCu√°l es el orden l√≥gico de mantenimiento?", {"a": "A, B, C, D", "b": "B, A, C, D", "c": "A, C, B, D", "d": "B, C, A, D"}, "a"),
                ("Si un circuito en serie se abre en un punto, ¬øqu√© sucede con el flujo de corriente?", {"a": "Aumenta", "b": "Disminuye", "c": "Se detiene completamente", "d": "Se mantiene igual"}, "c"),
                ("En un sistema de tuber√≠as, si la presi√≥n es demasiado baja, ¬øcu√°l es la causa t√©cnica probable?", {"a": "El di√°metro de la tuber√≠a es peque√±o", "b": "Hay una fuga", "c": "El l√≠quido es muy denso", "d": "La bomba es muy grande"}, "b"),
                ("¬øQu√© significa el estado 'Loop' en un diagrama de control?", {"a": "Fin del proceso", "b": "Repetici√≥n de pasos", "c": "Error cr√≠tico", "d": "Inicio del proceso"}, "b"),
                ("Si la luz de advertencia de aceite se enciende en un motor, ¬øcu√°l es el diagn√≥stico t√©cnico m√°s urgente?", {"a": "Falta de combustible", "b": "Baja presi√≥n o nivel de aceite", "c": "Sobrecalentamiento", "d": "Falla el√©ctrica"}, "b"),
                ("¬øCu√°l es el prop√≥sito principal de un fusible en un circuito el√©ctrico?", {"a": "Aumentar el voltaje", "b": "Proteger el circuito de sobrecargas", "c": "Almacenar energ√≠a", "d": "Regular la corriente"}, "b"),
                ("Dada la instrucci√≥n: 'Si el sensor A es True Y el sensor B es False, activar la alarma'. ¬øCu√°ndo se activa la alarma?", {"a": "A y B son True", "b": "A es False y B es True", "c": "A es True y B es False", "d": "Ambos son False"}, "c"),
                ("En el diagn√≥stico de software, si la aplicaci√≥n falla al cargar, ¬øqu√© se revisa primero?", {"a": "El c√≥digo fuente", "b": "La compatibilidad del sistema operativo", "c": "La versi√≥n del navegador", "d": "El estado de la base de datos"}, "b"),
            ]
        },
    }

    questions = []
    current_id = 1
    for area_name in AREAS:
        code = APTITUDES_MAP[area_name]["code"]
        data = test_data.get(area_name)
        items_to_use = data["items"][:N_PREGUNTAS_POR_AREA]
        for i, (pregunta, opciones, respuesta) in enumerate(items_to_use):
            questions.append({
                "id": current_id, 
                "area": area_name,
                "code": code,
                "pregunta": pregunta, 
                "opciones": opciones, 
                "respuesta_correcta": respuesta
            })
            current_id += 1
            
    return pd.DataFrame(questions)

df_preguntas = generate_gatb_questions()
N_TOTAL_PREGUNTAS = len(df_preguntas)


# --- 2. FUNCIONES DE ESTADO Y NAVEGACI√ìN ---

# Inicializaci√≥n de Session State (se mantiene)
if 'stage' not in st.session_state: st.session_state.stage = 'inicio'
if 'respuestas' not in st.session_state: st.session_state.respuestas = {}
if 'area_actual_index' not in st.session_state: st.session_state.area_actual_index = 0
if 'is_navigating' not in st.session_state: st.session_state.is_navigating = False # Soluci√≥n anti-doble clic
if 'error_msg' not in st.session_state: st.session_state.error_msg = ""
if 'resultados_df' not in st.session_state: st.session_state.resultados_df = pd.DataFrame()


def set_stage(new_stage):
    """Cambia la etapa de la aplicaci√≥n, desbloquea la navegaci√≥n y fuerza el scroll modificado."""
    st.session_state.stage = new_stage
    st.session_state.is_navigating = False # Desbloquear al cambiar de etapa
    st.session_state.error_msg = "" # Limpiar mensaje de error
    scroll_to_not_top() # Usar el scroll modificado


def check_all_answered(area):
    """Verifica si todas las preguntas del √°rea actual han sido respondidas."""
    preguntas_area = df_preguntas[df_preguntas['area'] == area]
    pregunta_ids_area = set(preguntas_area['id'])
    answered_count = sum(1 for q_id in pregunta_ids_area if st.session_state.respuestas.get(q_id) is not None)
    return answered_count == N_PREGUNTAS_POR_AREA

def siguiente_area():
    """Avanza a la siguiente √°rea o finaliza el test, con validaci√≥n y bloqueo (doble click)."""
    st.session_state.is_navigating = True 
    area_actual = AREAS[st.session_state.area_actual_index]
    
    if not check_all_answered(area_actual):
        st.session_state.error_msg = "üö® ¬°Alerta! Por favor, complete las 12 preguntas de la secci√≥n actual antes de avanzar."
        st.session_state.is_navigating = False 
        return
        
    if st.session_state.area_actual_index < len(AREAS) - 1:
        st.session_state.area_actual_index += 1
        set_stage('test_activo')
    else:
        calcular_resultados()
        set_stage('resultados')

def solve_all():
    """Resuelve autom√°ticamente todas las preguntas con la respuesta correcta y navega a resultados."""
    st.session_state.is_navigating = True 

    for index, row in df_preguntas.iterrows():
        pregunta_id = row['id']
        st.session_state.respuestas[pregunta_id] = row['respuesta_correcta']

    st.session_state.area_actual_index = len(AREAS) - 1
    
    calcular_resultados()
    set_stage('resultados')

def calcular_resultados():
    """Calcula y almacena los resultados finales, incluyendo el percentil num√©rico."""
    resultados_data = []
    
    for area in AREAS:
        preguntas_area = df_preguntas[df_preguntas['area'] == area]
        total_area = len(preguntas_area)
        aciertos_area = 0

        for index, row in preguntas_area.iterrows():
            pregunta_id = row['id']
            respuesta_usuario = st.session_state.respuestas.get(pregunta_id)
            
            if respuesta_usuario == row['respuesta_correcta']:
                aciertos_area += 1
        
        porcentaje = (aciertos_area / total_area) * 100 if total_area > 0 else 0
        percentil, clasificacion_texto = clasificar_percentil(porcentaje)
        
        resultados_data.append({
            "√Årea": area,
            "C√≥digo": APTITUDES_MAP[area]["code"],
            "Puntuaci√≥n Bruta": aciertos_area,
            "M√°xima Puntuaci√≥n": total_area,
            "Porcentaje (%)": float(f"{porcentaje:.1f}"), # Se guarda como float para animaci√≥n
            "Percentil": float(percentil), 
            "Clasificaci√≥n": clasificacion_texto,
            "Color": APTITUDES_MAP[area]["color"]
        })
    
    st.session_state.resultados_df = pd.DataFrame(resultados_data)
    st.session_state.is_navigating = False


# --- 3. COMPONENTE DE BARRA DE PROGRESO ANIMADA (NUEVO) ---

def animated_progress_bar(label, percentil, color):
    """Genera una barra de progreso animada usando HTML/CSS."""
    # Clasificaci√≥n de color para el texto interno de la barra
    text_color = "white" if percentil > 30 else "black"
    
    html_code = f"""
    <style>
        .progress-container {{ 
            width: 100%; 
            background: #e9ecef; 
            border-radius: 8px; 
            margin: 10px 0; 
            overflow: hidden; 
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
        }}
        .progress-bar {{ 
            height: 30px; 
            line-height: 30px; 
            color: {text_color}; 
            text-align: center; 
            border-radius: 8px;
            transition: width 1.5s ease-out; /* La animaci√≥n */
            box-shadow: 0 2px 4px rgba(0,0,0,0.1); 
            width: 0%; /* Comienza en 0% */
            font-weight: bold;
            font-size: 0.9em;
            background-color: {color};
        }}
        /* Animaci√≥n forzada para Streamlit - inyectamos el ancho final */
        .progress-bar[data-percentil="{percentil:.0f}"] {{
            width: {percentil:.0f}%;
        }}
    </style>
    <div class="progress-container">
        <div class="progress-bar" data-percentil="{percentil:.0f}" style="background-color: {color}; color: {text_color};">
            {label} ({percentil:.0f}%)
        </div>
    </div>
    """
    st.markdown(html_code, unsafe_allow_html=True)

# --- 4. FUNCIONES DE REPORTE PROFESIONAL (NUEVO) ---

def get_fortalezas_y_mejoras(df_resultados):
    """Clasifica √°reas seg√∫n el percentil para el informe profesional."""
    fortalezas = []
    mejoras = []

    for index, row in df_resultados.iterrows():
        area = row['√Årea']
        percentil = row['Percentil']
        
        if percentil >= 70: # Percentil Alto o Superior
            fortalezas.append(area)
        elif percentil <= 40: # Percentil Bajo o Muy Bajo
            mejoras.append(area)
            
    return fortalezas, mejoras

def get_estrategias_de_mejora(area):
    """Proporciona estrategias de mejora espec√≠ficas para cada √°rea aptitudinal."""
    estrategias = {
        "Razonamiento General": "Practicar juegos de l√≥gica, resolver acertijos complejos y leer material de alta complejidad para expandir la capacidad de abstracci√≥n y juicio.",
        "Razonamiento Verbal": "Ampliar el vocabulario con lectura activa y usar herramientas de redacci√≥n para estructurar ideas complejas en informes y correos.",
        "Razonamiento Num√©rico": "Realizar ejercicios diarios de c√°lculo mental, practicar la resoluci√≥n r√°pida de problemas aritm√©ticos y familiarizarse con la interpretaci√≥n de datos estad√≠sticos.",
        "Razonamiento Espacial": "Usar aplicaciones o puzzles 3D para la rotaci√≥n mental, practicar el dibujo t√©cnico o la lectura de planos y mapas.",
        "Velocidad Perceptiva": "Entrenar con ejercicios de 'b√∫squeda y comparaci√≥n' r√°pida de c√≥digos, n√∫meros y patrones en columnas. Ideal para la revisi√≥n de documentos.",
        "Precisi√≥n Manual": "Realizar tareas que requieran manipulaci√≥n fina, como el ensamblaje de modelos peque√±os o la pr√°ctica de caligraf√≠a y dibujo detallado.",
        "Coordinaci√≥n Manual": "Participar en actividades que sincronicen ojo-mano, como deportes con raqueta (tenis, ping pong), mecanograf√≠a r√°pida o el uso de software de dibujo.",
        "Atenci√≥n Concentrada": "Implementar la t√©cnica Pomodoro o sesiones de enfoque ininterrumpido. Eliminar distracciones y practicar la revisi√≥n de textos largos buscando errores espec√≠ficos.",
        "Razonamiento Mec√°nico": "Estudiar diagramas de m√°quinas simples (palancas, poleas, engranajes) y leer libros sobre principios de f√≠sica aplicada y mantenimiento industrial.",
        "Razonamiento Abstracto": "Resolver secuencias de matrices figurativas (tipo Raven), puzzles no verbales y practicar el reconocimiento de patrones l√≥gicos abstractos.",
        "Razonamiento Clerical": "Entrenar la organizaci√≥n y archivo de documentos. Practicar la clasificaci√≥n r√°pida y la verificaci√≥n cruzada de datos alfanum√©ricos.",
        "Razonamiento T√©cnico": "Analizar diagramas de flujo y resoluci√≥n de problemas t√©cnicos (troubleshooting) de sistemas conocidos (el√©ctricos, mec√°nicos, inform√°ticos).",
    }
    return estrategias.get(area, "Se recomienda entrenamiento espec√≠fico en tareas que requieran la aplicaci√≥n pr√°ctica y secuencial de esta habilidad.")


# --- 5. VISTAS DE STREAMLIT ---

def vista_inicio():
    """Muestra la p√°gina de inicio e instrucciones."""
    scroll_to_not_top()

    st.title("üß† Bater√≠a de Aptitudes Generales ‚Äì GATB Profesional")
    st.header("Evaluaci√≥n Estructurada de 12 Factores Aptitudinales")
    
    st.markdown("---")
    
    col1, col2 = st.columns([2, 1])

    with col1:
        st.info(f"""
        **üéØ Objetivo:** Medir **12 factores clave** de aptitud con **{N_TOTAL_PREGUNTAS} √≠tems simulados** para fines educativos.
        
        **üìã Estructura del Test:**
        - **Total de Secciones:** **{len(AREAS)}**
        - **Preguntas por Secci√≥n:** **{N_PREGUNTAS_POR_AREA}**
        """)
    
    with col2:
        st.subheader("Simulaci√≥n Profesional")
        st.warning("‚ö†Ô∏è **Nota:** Esta es una simulaci√≥n basada en la estructura GATB, con contenido original para respetar derechos de autor. Los resultados son ilustrativos.")
        
        is_disabled = st.session_state.is_navigating
        
        if st.button("üöÄ Iniciar Evaluaci√≥n", type="primary", use_container_width=True, disabled=is_disabled):
            st.session_state.area_actual_index = 0
            set_stage('test_activo')

        # Bot√≥n "Resolver Todo"
        if st.button("‚ú® Resolver Todo (Demo)", type="secondary", use_container_width=True, disabled=is_disabled):
            solve_all()


def vista_test_activo():
    """Muestra la secci√≥n de preguntas del √°rea actual."""
    scroll_to_not_top() # Scroll modificado

    area_actual = AREAS[st.session_state.area_actual_index]
    total_areas = len(AREAS)
    current_area_index = st.session_state.area_actual_index
    progress_percentage = (current_area_index + 1) / total_areas

    # --- Cabecera y Barra de Progreso ---
    st.title(f"Secci√≥n {current_area_index + 1} de {total_areas}: {area_actual}")
    st.progress(progress_percentage, text=f"Progreso General: **{area_actual}** ({APTITUDES_MAP[area_actual]['code']})")
    st.markdown("---")
    
    preguntas_area = df_preguntas[df_preguntas['area'] == area_actual]
    
    all_answered = check_all_answered(area_actual)
    answered_count = sum(1 for q_id in preguntas_area['id'] if st.session_state.respuestas.get(q_id) is not None)
    
    if st.session_state.error_msg:
        st.error(st.session_state.error_msg)

    with st.container(border=True):
        st.subheader(f"Tarea: Responda a los {N_PREGUNTAS_POR_AREA} √≠tems de {area_actual}")
        
        q_num = 1
        for index, row in preguntas_area.iterrows():
            pregunta_id = row['id']
            # Aseguramos el uso de MathJax para las f√≥rmulas
            question_text = row['pregunta'].replace('$', '$$').replace('$$$$', '$')
            opciones_radio = [f"{k}) {v}" for k, v in row['opciones'].items()]
            
            default_value_key = st.session_state.respuestas.get(pregunta_id)
            default_index = None
            if default_value_key:
                full_option_text = f"{default_value_key}) {row['opciones'][default_value_key]}"
                try:
                    default_index = opciones_radio.index(full_option_text)
                except ValueError:
                    default_index = None

            with st.container(border=True):
                st.markdown(f"**Pregunta {q_num}.**") 
                st.markdown(question_text) # Mostramos la pregunta con formato MathJax
                
                # Callback para guardar la respuesta inmediatamente al seleccionar
                def on_radio_change(q_id):
                    selected_option_full = st.session_state[f'q_{q_id}']
                    selected_key = selected_option_full.split(')')[0].strip() # Obtener la clave (a, b, c, d)
                    st.session_state.respuestas[q_id] = selected_key
                    st.session_state.error_msg = ""
                
                st.radio(
                    f"Respuesta {row['code']}-{q_num}:", 
                    opciones_radio, 
                    key=f'q_{pregunta_id}', 
                    index=default_index,
                    on_change=on_radio_change,
                    args=(pregunta_id,)
                )
            
            q_num += 1
    
    st.markdown("---")

    if st.session_state.area_actual_index < len(AREAS) - 1:
        next_area_name = AREAS[st.session_state.area_actual_index + 1]
        submit_label = f"‚û°Ô∏è Siguiente Secci√≥n: {next_area_name}"
    else:
        submit_label = "‚úÖ Finalizar Test y Generar Informe"

    is_disabled = st.session_state.is_navigating or not all_answered
    
    st.button(
        submit_label, 
        type="primary", 
        on_click=siguiente_area, 
        use_container_width=True,
        disabled=is_disabled
    )
    
    if not all_answered:
        st.warning(f"Faltan **{N_PREGUNTAS_POR_AREA - answered_count}** preguntas por responder en esta secci√≥n.")


def vista_resultados():
    """Muestra el informe de resultados profesional sin gr√°ficos, pero con barras animadas y an√°lisis de Fortalezas/Mejoras."""
    scroll_to_not_top()

    st.title("üìÑ Informe de Resultados GATB Profesional")
    st.header("Perfil Aptitudinal Detallado")
    
    df_resultados = st.session_state.resultados_df

    st.markdown("---")
    
    # --- 1. Calificaci√≥n Global ---
    avg_percentil = df_resultados['Percentil'].mean()
    calificacion, detalle_calificacion, color_calificacion = calificar_global(avg_percentil)

    st.subheader("üìä Calificaci√≥n Global del Perfil")
    
    st.markdown(f"""
    <div style="background-color: {color_calificacion}; padding: 25px; border-radius: 15px; color: white; margin-bottom: 30px; text-align: center; box-shadow: 0 6px 15px rgba(0,0,0,0.3);">
        <h2 style="margin: 0; font-size: 2.2em; font-weight: 800;">{calificacion}</h2>
        <p style="margin: 5px 0 10px 0; font-size: 1.2em; font-weight: 500;">Percentil Promedio Global: {avg_percentil:.1f}</p>
        <p style="font-size: 1em; margin: 0; border-top: 1px solid rgba(255,255,255,0.4); padding-top: 10px; opacity: 0.9;">{detalle_calificacion}</p>
    </div>
    """, unsafe_allow_html=True)
    
    # --- 2. Barras de Progreso Animadas (Reemplaza los gr√°ficos) ---
    st.subheader("üìà Percentiles Aptitudinales (Visualizaci√≥n Animada)")
    
    for index, row in df_resultados.sort_values(by='Percentil', ascending=False).iterrows():
        label = f"{row['√Årea']} ({row['C√≥digo']})"
        percentil = row['Percentil']
        color = row['Color']
        animated_progress_bar(label, percentil, color)

    st.markdown("---")

    # --- 3. An√°lisis Profesional: Fortalezas y √Åreas de Mejora ---
    fortalezas, mejoras = get_fortalezas_y_mejoras(df_resultados)
    estrategias_map = get_estrategias_de_mejora("") # Obtener el mapa completo
    
    col_fortaleza, col_mejora = st.columns(2)

    # FORTALEZAS
    with col_fortaleza:
        st.markdown('<h3 style="color: #008000;">üí™ Fortalezas Clave (Percentil ‚â• 70)</h3>', unsafe_allow_html=True)
        if fortalezas:
            st.success(f"Se identificaron **{len(fortalezas)}** √°reas de alto rendimiento:")
            for area in fortalezas:
                st.markdown(f"- **{area}** (`{APTITUDES_MAP[area]['code']}`)")
        else:
            st.info("No se identificaron √°reas con percentiles Superior o Alto. Enf√≥quese en el desarrollo balanceado.")

    # √ÅREAS A MEJORAR
    with col_mejora:
        st.markdown('<h3 style="color: #dc143c;">‚ö†Ô∏è √Åreas a Potenciar (Percentil ‚â§ 40)</h3>', unsafe_allow_html=True)
        if mejoras:
            st.error(f"Se identificaron **{len(mejoras)}** √°reas que requieren mayor desarrollo:")
            for area in mejoras:
                st.markdown(f"- **{area}** (`{APTITUDES_MAP[area]['code']}`)")
        else:
            st.success("¬°Excelente! No se identificaron √°reas cr√≠ticas que requieran intervenci√≥n inmediata.")

    st.markdown("---")

    # --- 4. Estrategias de Desarrollo Personalizado ---
    st.subheader("üí° Plan de Desarrollo: Estrategias de Mejora")
    
    if mejoras:
        st.info("Priorizar el desarrollo de estas aptitudes puede aumentar significativamente su rendimiento global.")
        
        for area in mejoras:
            estrategia = estrategias_map[area]
            with st.expander(f"Estrategia para: {area} ({APTITUDES_MAP[area]['code']})"):
                st.markdown(f"**Recomendaci√≥n:** {estrategia}")
                st.markdown("---")
                st.markdown("Dedicar tiempo diario a ejercicios focalizados en esta aptitud puede generar mejoras notables en 4-6 semanas.")
    else:
        st.balloons()
        st.success("Su perfil es robusto. Contin√∫e fortaleciendo sus habilidades clave y explore nuevos desaf√≠os para el crecimiento continuo.")


    st.markdown("---")

    if st.button("‚è™ Realizar Nueva Evaluaci√≥n", type="secondary"):
        st.session_state.respuestas = {}
        st.session_state.area_actual_index = 0
        set_stage('inicio')


# --- 6. CONTROL DEL FLUJO PRINCIPAL ---

if st.session_state.stage == 'inicio':
    vista_inicio()
elif st.session_state.stage == 'test_activo':
    vista_test_activo()
elif st.session_state.stage == 'resultados':
    vista_resultados()

# --- 7. FOOTER Y ACERCA DE ---
st.markdown("---")
st.markdown("<p style='text-align: center; font-size: small; color: grey;'>Desarrollado para simular la estructura del GATB (General Aptitude Test Battery). Las puntuaciones son ilustrativas y no deben usarse para toma de decisiones sin un profesional cualificado.</p>", unsafe_allow_html=True)
