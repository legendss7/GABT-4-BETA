import streamlit as st
import pandas as pd
import numpy as np
import time

# --- 1. CONFIGURACI√ìN E INICIALIZACI√ìN ---
st.set_page_config(layout="wide", page_title="Bater√≠a de Aptitudes GATB Profesional")

# Colocamos un ancla invisible al inicio de la p√°gina para referencia
st.html('<a id="top-anchor"></a>')

# Mapeo de Aptitudes 
APTITUDES_MAP = {
    "Razonamiento General": {"code": "G", "color": "#1f77b4"},
    "Razonamiento Verbal": {"code": "V", "color": "#ff7f0e"},
    "Razonamiento Num√©rico": {"code": "N", "color": "#2ca02c"},
    "Razonamiento Espacial": {"code": "S", "color": "#d62728"},
    "Velocidad Perceptiva": {"code": "P", "color": "#9467bd"},
    "Precisi√≥n Manual": {"code": "Q", "color": "#8c564b"},
    "Coordinaci√≥n Manual": {"code": 
"K", "color": "#e377c2"},
    "Atenci√≥n Concentrada": {"code": "A", "color": "#7f7f7f"},
    "Razonamiento Mec√°nico": {"code": "M", "color": "#bcbd22"},
    "Razonamiento Abstracto": {"code": "R", "color": "#17becf"},
    "Razonamiento Clerical": {"code": "C", "color": "#98df8a"},
    "Razonamiento T√©cnico": {"code": "T", "color": "#ff9896"},
}
AREAS = list(APTITUDES_MAP.keys())
N_PREGUNTAS_POR_AREA = 12 [cite: 79]

# Clasificaci√≥n y Calificaci√≥n Global
def clasificar_percentil(porcentaje):
    """Clasifica el percentil en rangos y devuelve un valor num√©rico para la barra (aunque se usa el percentil real para la animaci√≥n)."""
    if porcentaje >= 90: return 96, "Superior (90-99)"
    elif porcentaje >= 80: 
return 88, "Alto (80-89)"
    elif porcentaje >= 60: return 70, "Promedio Alto (60-79)"
    elif porcentaje >= 40: return 50, "Promedio (40-59)"
    elif porcentaje >= 20: return 30, "Promedio Bajo (20-39)"
    elif porcentaje >= 10: return 15, "Bajo (10-19)"
    else: return 5, "Muy Bajo (0-9)" [cite: 81]

def calificar_global(avg_percentil):
    """Genera la calificaci√≥n ejecutiva basada en el promedio global de percentiles."""
    if avg_percentil >= 85: 
        return "Potencial Ejecutivo üåü", """El perfil indica un potencial excepcionalmente alto y equilibrado para roles directivos, estrat√©gicos y de 
alta complejidad. Capacidad de aprendizaje superior y adaptaci√≥n r√°pida a cualquier entorno.""", "#008000"
    
    elif avg_percentil >= 65: 
        return "Nivel Profesional Avanzado üèÜ", """El perfil es s√≥lido, con fortalezas claras y un buen balance aptitudinal.
Excelente para roles t√©cnicos especializados, de gesti√≥n de proyectos y consultor√≠a.""", "#4682b4"
        
    elif avg_percentil >= 40: 
        return "Perfil Competitivo üíº", """El perfil se sit√∫a en el promedio superior, demostrando suficiencia en todas las √°reas.
Apto para la mayor√≠a de roles operativos y de coordinaci√≥n.
Requiere enfoque en el desarrollo de fortalezas clave.""", "#ff8c00"
        
    else: 
        return "Per√≠odo de Desarrollo üõ†Ô∏è", """El perfil requiere un per√≠odo de enfoque intensivo en el desarrollo de aptitudes clave.
Se recomienda comenzar con roles de soporte

def generate_gatb_questions():
    """Genera 144 preguntas simuladas (basadas en 12 plantillas √∫nicas) con respuestas esperadas."""
    
    # --- INICIO DE CORRECCI√ìN 1: Plantillas de preguntas reales (Copyright-Free) ---
    # Se crea 1 plantilla √∫nica por √°rea. El c√≥digo las repetir√° 12 veces.
    preguntas_reales_templates = {
        "Razonamiento General": (
            "Si todos los 'Trulls' son 'Scribs', y algunos 'Scribs' son 'Mors', ¬øcu√°l afirmaci√≥n es definitivamente verdadera?",
            {"a": "Todos los 'Trulls' son 'Mors'.", "b": "Algunos 'Trulls' no son 'Mors'.", "c": "Ning√∫n 'Scrib' es 'Trull'.", "d": "No se puede concluir nada sobre 'Trulls' y 'Mors'."},
            "d"
        ),
        "Razonamiento Verbal": (
            "Elija el ANT√ìNIMO de la palabra 'Elaci√≥n'.",
            {"a": "J√∫bilo", "b": "Orgullo", "c": "Depresi√≥n", "d": "Entusiasmo"},
            "c"
        ),
        "Razonamiento Num√©rico": (
            "Un producto cuesta $150. Si se aplica un descuento del 20% y luego se a√±ade un impuesto del 10% sobre el precio descontado, ¬øcu√°l es el precio final?",
            {"a": "$135", "b": "$132", "c": "$140", "d": "$128"},
            "b" # (150 * 0.80 = 120) -> (120 * 1.10 = 132)
        ),
        "Razonamiento Espacial": (
            "Si dobla el siguiente patr√≥n para formar un cubo, ¬øqu√© cara quedar√≠a OPUESTA a la cara 'A'?",
            "[ ¬∑ ][ A ][ B ][ C ]\n[ ¬∑ ][ D ][ ¬∑ ][ ¬∑ ]\n[ ¬∑ ][ E ][ ¬∑ ][ ¬∑ ]", # Simulacro de despliegue
            {"a": "B", "b": "C", "c": "D", "d": "E"},
            "d" # En un despliegue 1x3 + 2, A y E son opuestas.
        ),
        "Velocidad Perceptiva": (
            "Compare los dos c√≥digos alfanum√©ricos. ¬øSon exactamente iguales? (Responda 'a' si son Iguales, 'b' si son Diferentes).",
            {"a": "Iguales (8HjK-pWqZ)", "b": "Diferentes (8Hjk-pWqZ)", "c": "N/A", "d": "N/A"},
            "b" # Ejemplo de tarea P
        ),
        "Precisi√≥n Manual": (
            "Observe la secuencia: [O -> X -> O]. ¬øCu√°l de las siguientes opciones replica EXACTAMENTE el patr√≥n, incluyendo espacios?",
            {"a": "O -> X -> O", "b": "O->X->O", "c": "O -> X-> O", "d": "O -> X -> O"},
            "a" # Tarea Q (Proxy): Identificar la copia exacta.
        ),
        "Coordinaci√≥n Manual": (
            "Tarea (Proxy): Si debe mover un cursor del Punto A (10, 50) al Punto B (90, 10) en una pantalla, ¬øqu√© movimiento es el m√°s directo?",
            {"a": "Diagonalmente arriba y a la derecha.", "b": "Diagonalmente abajo y a la derecha.", "c": "Solo horizontal.", "d": "Solo vertical."},
            "a"
        ),
        "Atenci√≥n Concentrada": (
            "Cuente el n√∫mero de veces que aparece la letra 'e' (min√∫scula) en esta frase: 'El rendimiento excelente depende de la persistencia y de ejercer presi√≥n constante'.",
            {"a": "10", "b": "11", "c": "12", "d": "13"},
            "c" # (r**e**ndimi**e**nto **e**xc**e**l**e**nt**e** d**e**p**e**nd**e** d**e** la p**e**rsist**e**ncia...) = 12
        ),
        "Razonamiento Mec√°nico": (
            "Un engranaje A (grande) gira en sentido horario y est√° conectado a un engranaje B (peque√±o). ¬øEn qu√© direcci√≥n gira el engranaje B?",
            {"a": "Sentido horario", "b": "Sentido antihorario", "c": "No gira", "d": "Depende del tama√±o"},
            "b"
        ),
        "Razonamiento Abstracto": (
            "Observe la secuencia: [ ‚Ä¢ ] -> [ ‚Ä¢ ‚Ä¢ ] -> [ ‚Ä¢ ‚Ä¢ ‚Ä¢ ] -> [ ? ]. ¬øQu√© figura sigue?",
            {"a": "[ ‚Ä¢ ]", "b": "[ ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚Ä¢ ]", "c": "[ ‚Ä¢ ‚Ä¢ ]", "d": "[ X X X ]"},
            "b"
        ),
        "Razonamiento Clerical": (
            "Compare las dos listas e identifique la discrepancia. Lista 1: 'J.P. Morgan, SKU: 890-B'. Lista 2: 'J.P. Morgan, SKU: 890-8'.",
            {"a": "El nombre es diferente.", "b": "El SKU es diferente.", "c": "Ambas son id√©nticas.", "d": "Falta informaci√≥n."},
            "b"
        ),
        "Razonamiento T√©cnico": (
            "Si un indicador LED de 'Encendido' en una computadora no se ilumina, pero el ventilador funciona, ¬øcu√°l es el diagn√≥stico m√°s probable?",
            {"a": "La fuente de poder est√° totalmente muerta.", "b": "El CPU est√° fallando.", "c": "El indicador LED est√° quemado o desconectado.", "d": "Falta el disco duro."},
            "c"
        )
    }
    # --- FIN DE CORRECCI√ìN 1 ---

    questions = []
    current_id = 1
    for area_name in AREAS:
        code = APTITUDES_MAP[area_name]["code"]
        
        # --- INICIO DE CORRECCI√ìN 1B: Usar la plantilla real 12 veces ---
        # Obtenemos la plantilla √∫nica para esta √°rea
        template_question = preguntas_reales_templates.get(area_name)
        
        # Replicamos la plantilla 12 veces (N_PREGUNTAS_POR_AREA)
        # Esto imita la l√≥gica de simulaci√≥n original [cite: 86-89] pero con una pregunta base real.
        items_to_use = [template_question] * N_PREGUNTAS_POR_AREA 
        # --- FIN DE CORRECCI√ìN 1B ---
        
        # Simulaci√≥n de respuesta correcta (se mantiene la l√≥gica original)
        if area_name in ["Razonamiento General", "Razonamiento Verbal", "Razonamiento Num√©rico"]:
            expected_answer = "c"
        elif area_name in ["Razonamiento Clerical"]:
            expected_answer = "a"
        else:
            expected_answer = "d" [cite: 90]
# Default para otros
            
        for i, (pregunta_texto, opciones_dict, respuesta_real) in enumerate(items_to_use):
            
            # Nota: El 'expected_answer' de la simulaci√≥n [cite: 90-91] pisa la 'respuesta_real' de la plantilla.
            # Para una demo real, se usar√≠a 'respuesta_real'. Mantenemos 'expected_answer'
            # para que la simulaci√≥n de resultados funcione como estaba dise√±ada [cite: 100-101].
            
            questions.append({
                "id": current_id, 
                "area": area_name,
            "code": code,
                "pregunta": f"Pregunta {code}-{i+1}. {pregunta_texto}", # Usamos el texto de la plantilla
                "opciones": opciones_dict, # Usamos las opciones de la plantilla
                "respuesta_correcta": expected_answer # Usamos la respuesta de la simulaci√≥n original
            })
            current_id += 1
        
    return pd.DataFrame(questions)

df_preguntas = generate_gatb_questions()
N_TOTAL_PREGUNTAS = len(df_preguntas) [cite: 93]

# --- 2. FUNCIONES DE ESTADO Y NAVEGACI√ìN ---

# Inicializaci√≥n de Session State
if 'stage' not in st.session_state: st.session_state.stage = 'inicio' [cite: 93]
if 'respuestas' not in st.session_state: st.session_state.respuestas = {} [cite: 93]
if 'area_actual_index' not in st.session_state: st.session_state.area_actual_index = 0 [cite: 93]
if 'is_navigating' not in st.session_state: st.session_state.is_navigating = False [cite: 93]
if 'error_msg' not in st.session_state: st.session_state.error_msg = "" [cite: 93]
if 'resultados_df' not in st.session_state: st.session_state.resultados_df = pd.DataFrame() [cite: 93]


# Funci√≥n MAXIMAMENTE FORZADA para el scroll al top (SOLUCI√ìN CLAVE)
def forzar_scroll_al_top():
    """
    Injecta JS para forzar el scroll al tope 
ABSOLUTO de la p√°gina (top: 0).
    """
    js_code = """
        <script>
            setTimeout(function() {
                // Intento principal: scroll de la ventana
                window.parent.scrollTo({ top: 0, behavior: 'auto' });
                
                // Intento secundario: scroll del contenedor principal de Streamlit
                var mainContent = window.parent.document.querySelector('[data-testid="stAppViewContainer"]');
                if (mainContent) {
                    mainContent.scrollTo({ top: 0, behavior: 'auto' });
                }
      }, 250); 
        </script>
        """
    # Se usa st.html para inyectar el script forzado
    st.html(js_code) [cite: 96]


def set_stage(new_stage):
    """Cambia la etapa de la aplicaci√≥n, desbloquea la navegaci√≥n y llama a la funci√≥n de scroll."""
    st.session_state.stage = new_stage
    st.session_state.is_navigating = False # Desbloquear al cambiar de etapa 
    st.session_state.error_msg = "" # Limpiar mensaje de error 
    forzar_scroll_al_top() # <<-- LLAMADA A LA FUNCI√ìN DE SCROLL AL TOP 

# --- INICIO DE CORRECCI√ìN 2: Funci√≥n de Reseteo ---
def reset_to_start():
    """Reinicia el estado de la sesi√≥n y vuelve a la pantalla de inicio."""
    st.session_state.respuestas = {}
    st.session_state.area_actual_index = 0
    st.session_state.resultados_df = pd.DataFrame()
    st.session_state.error_msg = ""
    set_stage('inicio')
# --- FIN DE CORRECCI√ìN 2 ---

def check_all_answered(area):
    """Verifica si todas las preguntas del √°rea actual han sido respondidas."""
    preguntas_area = df_preguntas[df_preguntas['area'] == area]
    pregunta_ids_area = set(preguntas_area['id'])
    answered_count = sum(1 for q_id in pregunta_ids_area if st.session_state.respuestas.get(q_id) is not None)
    return answered_count == N_PREGUNTAS_POR_AREA [cite: 97]

def siguiente_area():
    """Avanza a la siguiente √°rea o finaliza el test, con validaci√≥n y bloqueo."""
    
    area_actual = AREAS[st.session_state.area_actual_index]
    
    if not check_all_answered(area_actual):
        st.session_state.error_msg = "üö® ¬°Alerta!
Por favor, complete las 12 preguntas de la secci√≥n actual antes de avanzar."
        return [cite: 97, 98]
        
    st.session_state.is_navigating = True # Bloqueo temporal mientras se navega [cite: 98]

    if st.session_state.area_actual_index < len(AREAS) - 1:
        st.session_state.area_actual_index += 1
        set_stage('test_activo')
    else:
        calcular_resultados()
        set_stage('resultados') [cite: 98]

def solve_all():
    """Resuelve autom√°ticamente todas las preguntas con la respuesta 
correcta (simulaci√≥n) y navega a resultados."""
    for index, row in df_preguntas.iterrows():
        pregunta_id = row['id']
        st.session_state.respuestas[pregunta_id] = row['respuesta_correcta'] [cite: 99]

    st.session_state.area_actual_index = len(AREAS) - 1 [cite: 99]
    
    calcular_resultados()
    set_stage('resultados') [cite: 99]

def calcular_resultados():
    """Calcula y almacena los resultados finales, incluyendo el percentil num√©rico.
(Simulaci√≥n de percentiles)"""
    resultados_data = []
    
    # Simulaci√≥n de resultados para que el informe sea interesante
    np.random.seed(42) # Para resultados consistentes en la simulaci√≥n [cite: 100]
    simulated_percentiles = {
        "Razonamiento General": 90, "Razonamiento Verbal": 85, "Razonamiento Num√©rico": 80,
        "Razonamiento Espacial": 65, "Velocidad Perceptiva": 55, "Precisi√≥n Manual": 45,
        "Coordinaci√≥n Manual": 35, "Atenci√≥n Concentrada": 25, "Razonamiento Mec√°nico": 75,
        "Razonamiento Abstracto": 
60, "Razonamiento Clerical": 95, "Razonamiento T√©cnico": 50
    } [cite: 100, 101]

    for area in AREAS:
        # Usamos los percentiles simulados
        percentil = simulated_percentiles.get(area, np.random.randint(20, 95)) [cite: 101]
        clasificacion_val, clasificacion_texto = clasificar_percentil(percentil) [cite: 101]
        
        # Invertimos el c√°lculo para que el 'Porcentaje' coincida con el Percentil para fines de visualizaci√≥n simplificada.
        porcentaje = percentil [cite: 101]
      
  aciertos_area = round((percentil / 100) * N_PREGUNTAS_POR_AREA) # Puntuaci√≥n bruta simulada [cite: 102]
        
        resultados_data.append({
            "√Årea": area,
            "C√≥digo": APTITUDES_MAP[area]["code"],
            "Puntuaci√≥n Bruta": aciertos_area,
            "M√°xima Puntuaci√≥n": N_PREGUNTAS_POR_AREA,
            "Porcentaje (%)": float(f"{porcentaje:.1f}"),
            "Percentil": float(percentil), 
            "Clasificaci√≥n": clasificacion_texto,
            "Color": APTITUDES_MAP[area]["color"]
        }) [cite: 102, 103]
    
    st.session_state.resultados_df = pd.DataFrame(resultados_data) [cite: 103]
    st.session_state.is_navigating = False [cite: 103]


# --- 3. COMPONENTE DE BARRA DE PROGRESO ANIMADA ---

def animated_progress_bar(label, percentil, color):
    """Genera una barra de progreso animada usando HTML/CSS."""
    text_color = "white" if percentil > 30 else "black"
    
   html_code = f"""
    <style>
        .progress-container {{ 
            width: 100%;
background: #e9ecef; 
            border-radius: 8px; 
            margin: 15px 0 5px 0; 
            overflow: hidden; 
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
}}
        .progress-bar {{ 
            height: 35px;
line-height: 35px; 
            color: {text_color}; 
            text-align: center; 
            border-radius: 8px;
            transition: width 1.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
/* Animaci√≥n m√°s profesional */
            box-shadow: 0 2px 4px rgba(0,0,0,0.15);
width: 0%; /* Comienza en 0% */
            font-weight: bold;
font-size: 1em;
            background-color: {color};
            display: flex;
            align-items: center;
            justify-content: center;
            white-space: nowrap;
}}
        /* Animaci√≥n forzada para Streamlit - inyectamos el ancho final */
        .progress-bar[data-percentil="{percentil:.0f}"] {{
            width: {percentil:.0f}%;
}}
    </style>
    <div class="progress-container">
        <div class="progress-bar" data-percentil="{percentil:.0f}" style="background-color: {color}; color: {text_color};">
            {label} - Puntuaci√≥n Percentil: {percentil:.0f}%
        </div>
    </div>
    """ [cite: 104-112]
    st.markdown(html_code, unsafe_allow_html=True) [cite: 112]

# --- 4. FUNCIONES DE REPORTE PROFESIONAL (MEJORADO) ---

def get_analisis_detalle(df_resultados):
    """Genera un an√°lisis detallado de las fortalezas y debilidades, y el potencial ocupacional."""
    
    df_sorted = df_resultados.sort_values(by='Percentil', ascending=False)
    
    # Top 3 Fortalezas
    top_3 = df_sorted.head(3) [cite: 113]
    fortalezas_text = "<ul>"
    for index, row in top_3.iterrows():
        fortalezas_text += f"<li>**{row['√Årea']} ({row['Percentil']}%)**: Una habilidad sobresaliente en **{row['√Årea']}** sugiere un alto potencial para la [aplicaci√≥n clave de la aptitud].</li>" [cite: 113]
    fortalezas_text += "</ul>"
    
    # Bottom 3 a Mejorar
    bottom_3 = df_sorted.tail(3) [cite: 113]
    mejoras_text = "<ul>"
    for index, row in bottom_3.iterrows():
        mejoras_text += f"<li>**{row['√Årea']} ({row['Percentil']}%)**: El desarrollo de **{row['√Årea']}** debe ser una prioridad, ya que es la base para [√°rea de mejora clave].
Se sugiere el entrenamiento inmediato en ejercicios de [tipo de ejercicio].</li>" [cite: 114, 115]
    mejoras_text += "</ul>"

    # Potencial Ocupacional
    top_area = top_3.iloc[0]['√Årea'] [cite: 115]
    if top_area in ["Razonamiento General", "Razonamiento Verbal", "Razonamiento Num√©rico"]:
        potencial = "Roles Estrat√©gicos y de Gesti√≥n de Informaci√≥n (Consultor√≠a, Finanzas, Liderazgo de Proyectos)."
        perfil = "Alto Potencial Cognitivo (G-Factor)." [cite: 115]
    elif top_area in ["Razonamiento Mec√°nico", "Razonamiento Espacial", "Razonamiento T√©cnico"]:
        potencial = "Roles de Ingenier√≠a, Arquitectura, 
Dise√±o Industrial y Mantenimiento T√©cnico Especializado."
        perfil = "Fuerte Perfil T√©cnico-Estructural." [cite: 115, 116]
    else:
        potencial = "Roles Administrativos, de Control de Calidad, Log√≠stica, Programaci√≥n y Operaciones de Alto Volumen."
        perfil = "S√≥lido Perfil Operativo y de Detalle." [cite: 116]

    return {
        "fortalezas": fortalezas_text,
        "mejoras": mejoras_text,
        "potencial": potencial,
        "perfil": perfil,
        "top_area": top_area
    } [cite: 116, 117]

def get_estrategias_de_mejora(area):
    """Proporciona estrategias de mejora espec√≠ficas para cada √°rea aptitudinal."""
    estrategias = {
        "Razonamiento General": "Practicar juegos de l√≥gica, resolver acertijos complejos y leer material de alta complejidad para expandir la capacidad de abstracci√≥n y juicio.
**Aplicaci√≥n:** Liderazgo estrat√©gico y toma de decisiones complejas.",
        "Razonamiento Verbal": "Ampliar el vocabulario con lectura activa y usar herramientas de redacci√≥n para estructurar ideas complejas en informes y correos.
**Aplicaci√≥n:** Comunicaci√≥n ejecutiva y negociaci√≥n.",
        "Razonamiento Num√©rico": "Realizar ejercicios diarios de c√°lculo mental, practicar la resoluci√≥n r√°pida de problemas aritm√©ticos y familiarizarse con la interpretaci√≥n de datos estad√≠sticos.
**Aplicaci√≥n:** An√°lisis financiero y control presupuestario.",
        "Razonamiento Espacial": "Usar aplicaciones o puzzles 3D para la rotaci√≥n mental, practicar el dibujo t√©cnico o la lectura de planos y mapas.
**Aplicaci√≥n:** Dise√±o, planeaci√≥n arquitect√≥nica y montaje.",
        "Velocidad Perceptiva": "Entrenar con ejercicios de 'b√∫squeda y comparaci√≥n' r√°pida de c√≥digos, n√∫meros y patrones en columnas.
Ideal para la revisi√≥n de documentos. **Aplicaci√≥n:** Revisi√≥n de contratos y control de calidad masivo.",
        "Precisi√≥n Manual": "Realizar tareas que requieran manipulaci√≥n fina, como el ensamblaje de modelos peque√±os o la pr√°ctica de caligraf√≠a y dibujo detallado.
**Aplicaci√≥n:** Cirug√≠a, joyer√≠a y micro-ensamblaje.",
        "Coordinaci√≥n Manual": "Participar en actividades que sincronicen ojo-mano, como deportes con raqueta (tenis, ping pong), mecanograf√≠a r√°pida o el uso de software de dibujo.
**Aplicaci√≥n:** Operaci√≥n de maquinaria compleja y manejo de veh√≠culos.",
        "Atenci√≥n Concentrada": "Implementar la t√©cnica Pomodoro o sesiones de enfoque ininterrumpido.
Eliminar distracciones y practicar la revisi√≥n de textos largos buscando errores espec√≠ficos.
**Aplicaci√≥n:** Tareas de auditor√≠a y vigilancia.",
        "Razonamiento Mec√°nico": "Estudiar diagramas de m√°quinas simples (palancas, poleas, engranajes) y leer libros sobre principios de f√≠sica aplicada y mantenimiento industrial.
**Aplicaci√≥n:** Mantenimiento preventivo y diagn√≥stico de fallas mec√°nicas.",
        "Razonamiento Abstracto": "Resolver secuencias de matrices figurativas (tipo Raven), puzzles no verbales y practicar el reconocimiento de patrones l√≥gicos abstractos.
**Aplicaci√≥n:** Detecci√≥n de tendencias y an√°lisis predictivo sin datos num√©ricos.",
        "Razonamiento Clerical": "Entrenar la organizaci√≥n y archivo de documentos.
Practicar la clasificaci√≥n r√°pida y la verificaci√≥n cruzada de datos alfanum√©ricos.
**Aplicaci√≥n:** Gesti√≥n documental, archivo legal y tareas administrativas.",
        "Razonamiento T√©cnico": "Analizar diagramas de flujo y resoluci√≥n de problemas t√©cnicos (troubleshooting) de sistemas conocidos (el√©ctricos, mec√°nicos, inform√°ticos).
**Aplicaci√≥n:** Soporte t√©cnico y resoluci√≥n de problemas inform√°ticos de primer nivel.",
    }
    return estrategias.get(area, "Se recomienda entrenamiento espec√≠fico en tareas de aplicaci√≥n pr√°ctica.") [cite: 117-131]


# --- 5. VISTAS DE STREAMLIT ---

def vista_inicio():
    """Muestra la p√°gina de inicio e instrucciones.
(Scroll y Clic √önico Corregidos)"""
    # forzar_scroll_al_top() # Ya se llama en set_stage

    st.title("üß† Bater√≠a de Aptitudes Generales ‚Äì GATB Profesional")
    st.header("Evaluaci√≥n Estructurada de 12 Factores Aptitudinales")
    
    st.markdown("---")
    
    col1, col2 = st.columns([2, 1])

    with col1:
        st.info(f"""
        **üéØ Objetivo:** Medir **12 factores clave** de aptitud con **{N_TOTAL_PREGUNTAS} √≠tems simulados** para fines educativos.
        
        **üìã Estructura del Test:**
        - **Total de Secciones:** **{len(AREAS)}**
        - **Preguntas por Secci√≥n:** **{N_PREGUNTAS_POR_AREA}**
        """) [cite: 132, 133]
    
    with col2:
        st.subheader("Simulaci√≥n Profesional")
        st.warning("‚ö†Ô∏è **Nota:** Esta es una simulaci√≥n. Los resultados son ilustrativos para el an√°lisis.") [cite: 133]
        
        # Corregido: La llamada a 
set_stage dentro de on_click asegura que se ejecuta al inicio
        if st.button("üöÄ Iniciar Evaluaci√≥n", type="primary", use_container_width=True, on_click=lambda: set_stage('test_activo')): [cite: 134]
            # No necesitamos l√≥gica adicional aqu√≠, set_stage maneja la transici√≥n
            pass 

        if st.button("‚ú® Resolver Todo (Demo)", type="secondary", use_container_width=True, on_click=solve_all): [cite: 134]
            # No necesitamos l√≥gica adicional aqu√≠, solve_all maneja la transici√≥n
      pass [cite: 135]


def vista_test_activo():
    """Muestra la secci√≥n de preguntas del √°rea actual."""
    
    area_actual = AREAS[st.session_state.area_actual_index]
    total_areas = len(AREAS)
    current_area_index = st.session_state.area_actual_index
    progress_percentage = (current_area_index + 1) / total_areas [cite: 135]

    # --- Cabecera y Barra de Progreso ---
    st.title(f"Secci√≥n {current_area_index + 1} de {total_areas}: {area_actual}")
    st.progress(progress_percentage, text=f"Progreso General: **{area_actual}** ({APTITUDES_MAP[area_actual]['code']})")
    st.markdown("---")
    
    preguntas_area = df_preguntas[df_preguntas['area'] == area_actual] [cite: 135]
    
   all_answered = check_all_answered(area_actual)
    answered_count = sum(1 for q_id in preguntas_area['id'] if st.session_state.respuestas.get(q_id) is not None) [cite: 136]
    
    if st.session_state.error_msg:
        st.error(st.session_state.error_msg) [cite: 136]

    with st.container(border=True):
        st.subheader(f"Tarea: Responda a los {N_PREGUNTAS_POR_AREA} √≠tems de {area_actual}")
        
        q_num = 1
        for index, row in preguntas_area.iterrows():
            pregunta_id 
= row['id']
            question_text = row['pregunta']
            opciones_radio = [f"{k}) {v}" for k, v in row['opciones'].items()] [cite: 136, 137]
            
            # Determinar el √≠ndice por defecto para mantener la selecci√≥n
            default_value_key = st.session_state.respuestas.get(pregunta_id) [cite: 137]
            default_index = None
    
        if default_value_key:
                full_option_text = f"{default_value_key}) {row['opciones'][default_value_key]}"
                try:
                    default_index = opciones_radio.index(full_option_text) [cite: 138]
                except:
  default_index = None [cite: 138, 139]

            with st.container(border=True):
                st.markdown(f"**Pregunta {q_num}.**") 
                st.markdown(question_text) [cite: 139]
                
                def on_radio_change(q_id):
     """Maneja el cambio en el radio button y actualiza la respuesta en el estado."""
                    selected_option_full = st.session_state[f'q_{q_id}']
                    selected_key = selected_option_full.split(')')[0].strip()
                    st.session_state.respuestas[q_id] = selected_key [cite: 140]
    st.session_state.error_msg = "" [cite: 141]
                
                st.radio(
                    f"Respuesta {row['code']}-{q_num}:", 
                    opciones_radio, 
 key=f'q_{pregunta_id}', 
                    index=default_index,
                    on_change=on_radio_change,
                    args=(pregunta_id,)
                ) [cite: 141, 142]
            
  q_num += 1 [cite: 143]
    
    st.markdown("---")

    if st.session_state.area_actual_index < len(AREAS) - 1:
        next_area_name = AREAS[st.session_state.area_actual_index + 1]
        submit_label = f"‚û°Ô∏è Siguiente Secci√≥n: {next_area_name}"
    else:
        submit_label = "‚úÖ Finalizar Test y Generar Informe" [cite: 143]

    is_disabled = not all_answered [cite: 143]
    
    # Bot√≥n Siguiente que llama a la funci√≥n de navegaci√≥n (y fuerza el scroll)
    st.button(
     submit_label, 
        type="primary", 
        on_click=siguiente_area, 
        use_container_width=True,
        disabled=is_disabled
    ) [cite: 143, 144]
    
    if not all_answered:
        st.warning(f"Faltan **{N_PREGUNTAS_POR_AREA - answered_count}** preguntas por responder en esta secci√≥n.") [cite: 144]

    # --- INICIO DE CORRECCI√ìN 2B: Bot√≥n de Reinicio en test ---
    st.markdown("---")
    st.button(
        "‚è™ Volver al Inicio (Reiniciar Test)", 
        type="secondary", 
        on_click=reset_to_start, 
        use_container_width=True
    )
    # --- FIN DE CORRECCI√ìN 2B ---


def vista_resultados():
    """Muestra el informe de resultados profesional, detallado y animado."""
    # forzar_scroll_al_top() # Ya se llama en set_stage

    df_resultados 
= st.session_state.resultados_df
    analisis = get_analisis_detalle(df_resultados) [cite: 145]
    
    st.title("üèÜ Informe Ejecutivo de Perfil Aptitudinal GATB")
    st.markdown("---")
    
    # --- 1. Calificaci√≥n Global (Resumen Ejecutivo) ---
    avg_percentil = df_resultados['Percentil'].mean()
    calificacion, detalle_calificacion, color_calificacion = calificar_global(avg_percentil) [cite: 145]

    st.subheader("1.
Resumen Ejecutivo y Perfil Global")
    
    # Contenedor para la calificaci√≥n global
    st.markdown(f"""
    <div style="background-color: {color_calificacion}; padding: 25px; border-radius: 15px; color: white; margin-bottom: 30px; text-align: center; box-shadow: 0 8px 20px rgba(0,0,0,0.4);">
        <h2 style="margin: 0; font-size: 2.5em; font-weight: 900; letter-spacing: 1px;">{calificacion}</h2>
        <p style="margin: 5px 0 15px 0; font-size: 1.3em; font-weight: 500;">Percentil Promedio Global: **{avg_percentil:.1f}%**</p>
        <p style="font-size: 1.1em; margin: 0; border-top: 1px solid rgba(255,255,255,0.5); padding-top: 10px; opacity: 0.9;">**Diagn√≥stico:** {detalle_calificacion}</p>
   </div>
    """, unsafe_allow_html=True) [cite: 146, 147]
    
    # Conclusiones del Evaluador
    st.markdown(f"""
    <div style="padding: 15px; border-left: 5px solid #ff9900; background-color: #fff8e1; border-radius: 5px; margin-bottom: 20px;">
        <p style="font-weight: bold; margin: 0;">Conclusiones del Evaluador:</p>
        <p style="margin: 5px 0 0 0;">El perfil muestra una base **{analisis['perfil']}**, con una clara inclinaci√≥n hacia **{analisis['top_area']}**.
El individuo es particularmente apto para {analisis['potencial']}. Se recomienda un plan de desarrollo focalizado en las √°reas de menor rendimiento para lograr un perfil m√°s hol√≠stico.</p>
    </div>
    """, unsafe_allow_html=True) [cite: 147, 148]
    
    st.markdown("---")

    # --- 2. Perfil Aptitudinal Detallado (Animado) ---
    st.subheader("2. Detalle de Puntuaciones por Aptitud (Percentiles)")
    st.info("El percentil indica el porcentaje de la poblaci√≥n que obtuvo una puntuaci√≥n igual o inferior a la suya. Un percentil de 90 significa que supera al 90% de la poblaci√≥n de referencia.") [cite: 148]

  for index, row in df_resultados.sort_values(by='Percentil', ascending=False).iterrows():
        label = f"**{row['√Årea']}** ({row['Clasificaci√≥n']})"
        percentil = row['Percentil']
        color = row['Color']
        animated_progress_bar(label, percentil, color) [cite: 149]

    st.markdown("---")

    # --- 3. An√°lisis de Fortalezas y √Åreas de Mejora ---
    st.subheader("3. An√°lisis Comparativo del Perfil")
    
    col_fortaleza, col_mejora = st.columns(2)

    # FORTALEZAS (TOP 3)
    with col_fortaleza:
     st.markdown('<h4 style="color: #008000;">üåü Fortalezas Intr√≠nsecas (Top 3)</h4>', unsafe_allow_html=True)
        st.markdown(analisis['fortalezas'], unsafe_allow_html=True)
        st.success("Estas aptitudes deben ser los pilares de la trayectoria profesional y la base para el entrenamiento de otras √°reas.") [cite: 150]

    # √ÅREAS A MEJORAR (BOTTOM 3)
    with col_mejora:
        st.markdown('<h4 style="color: #dc143c;">üìâ √Åreas de Oportunidad (Bottom 3)</h4>', unsafe_allow_html=True)
        st.markdown(analisis['mejoras'], unsafe_allow_html=True)
        st.error("Una puntuaci√≥n baja en estas √°reas 
puede limitar el potencial en roles espec√≠ficos y requiere desarrollo.") [cite: 150, 151]

    st.markdown("---")

    # --- 4. Potencial Ocupacional y Estrategia de Desarrollo ---
    st.subheader("4.
Potencial de Rol y Plan de Desarrollo")
    
    st.markdown(f"""
    <div style="padding: 20px; border: 1px solid #4682b4; background-color: #f0f8ff; border-radius: 10px; margin-bottom: 20px;">
        <h5 style="margin-top: 0; color: #4682b4;">Potencial Ocupacional Recomendado (Enfoque Primario)</h5>
        <p style="font-size: 1.1em; font-weight: bold;">{analisis['potencial']}</p>
    </div>
    """, unsafe_allow_html=True) [cite: 152]

    st.markdown("---")
    st.markdown("#### **Estrategias Individualizadas de Desarrollo**")
    st.info("Plan de acci√≥n basado en las aptitudes con percentiles bajos (‚â§ 40%) o aquellas que requieran mejora 
continua.")
    
    # Filtrar √°reas con percentil <= 40
    bottom_areas = df_resultados[df_resultados['Percentil'] <= 40]['√Årea'].tolist() [cite: 153]
    
    if bottom_areas:
        for area in bottom_areas:
            estrategia = get_estrategias_de_mejora(area)
            with st.expander(f"üìö Estrategia para desarrollar **{area}** (`{APTITUDES_MAP[area]['code']}`)", expanded=True):
                st.markdown(f"**Nivel de Prioridad:** **ALTA**")
          st.markdown(f"**Plan de Acci√≥n Sugerido:** {estrategia}") [cite: 153, 154]
    else:
        st.balloons()
        st.success("Su perfil es excepcional y equilibrado.
El plan de acci√≥n es mantener las fortalezas y buscar la maestr√≠a profesional.") [cite: 154, 155]


    st.markdown("---")

    # --- INICIO DE CORRECCI√ìN 2C: Bot√≥n de Reinicio en resultados ---
    # Se reemplaza la l√≥gica lambda  por la funci√≥n de reseteo.
    st.button(
        "‚è™ Realizar Nueva Evaluaci√≥n", 
        type="secondary", 
        on_click=reset_to_start
    )
    # --- FIN DE CORRECCI√ìN 2C ---

# --- 6. CONTROL DEL FLUJO PRINCIPAL ---

if st.session_state.stage == 'inicio':
    vista_inicio() [cite: 156]
elif st.session_state.stage == 'test_activo':
    vista_test_activo() [cite: 156]
elif st.session_state.stage == 'resultados':
    vista_resultados() [cite: 156]

# --- 7. FOOTER Y ACERCA DE ---
st.markdown("---")
st.markdown("<p style='text-align: center; font-size: 
small; color: grey;'>Informe generado por IA basado en la estructura del GATB. Las puntuaciones son simuladas con fines educativos y de demostraci√≥n.</p>", unsafe_allow_html=True) [cite: 156]


# --- INICIO DE CORRECCI√ìN 3: Instrucciones de UI/UX a√±adidas como comentario ---

"""
Aqu√≠ tienes varios prompts detallados para generar una pantalla de resultados profesional para un test "GABT Pro Max".
He basado los prompts en la suposici√≥n de que "GABT" es un test de aptitudes (similar al GATB - General Aptitude Test Battery, un test de aptitudes vocacionales) y que el "Pro Max" implica un dise√±o de alta gama, tecnol√≥gico y moderno.
Prompt 1: Moderno, Corporativo y Centrado en Datos (Estilo Dashboard)
Este prompt es ideal para una vista de escritorio o web, enfocado en la anal√≠tica.

UI/UX design de una pantalla de resultados de un test de aptitud profesional llamado 'GABT Pro Max'. La interfaz es un dashboard web, limpio, moderno y de alta fidelidad.

Elementos clave:
1.  Un 'Puntaje General' prominente (ej. '92%') en una tarjeta principal.
2.  Un gr√°fico de radar (radar chart) elegante que desglosa 8 aptitudes clave (Verbal, Num√©rica, Espacial, Percepci√≥n, etc.).
3.  Gr√°ficos de barras horizontales comparando el puntaje del usuario con el promedio de la industria.
4.  Una secci√≥n de 'Recomendaciones de Carrera' o 'Fortalezas Clave' con √≠conos minimalistas.

Estilo y Paleta:
-   Paleta de colores corporativa: azules profundos (#003366), blancos, grises claros (#F4F7FA) y un toque de verde azulado (teal, #00AAB5) o dorado como color de acento.
-   Tipograf√≠a sans-serif n√≠tida (como Inter o Roboto).
-   Uso de espacio en blanco, sombras sutiles y bordes redondeados.
-   Mockup de Figma, tendencia en Behance, dise√±o profesional.
Prompt 2: Elegante, Minimalista y en Modo Oscuro (Dark Mode)
Este prompt busca un acabado m√°s "premium" y tecnol√≥gico, muy popular en aplicaciones modernas.

Dise√±o de interfaz (UI) para la pantalla de resultados del 'GABT Pro Max', en modo oscuro (dark mode) profesional. La pantalla debe sentirse premium y anal√≠tica.

Elementos clave:
1.  Un saludo al usuario y su puntaje principal en un medidor circular (gauge chart) con un gradiente brillante (cian o verde ne√≥n).
2.  Tarjetas (cards) de vidrio esmerilado (frosted glass / glassmorphism) que muestran los puntajes de las sub-categor√≠as.
3.  Un gr√°fico de l√≠neas o √°rea que muestra el 'Progreso de Aptitud' (si aplica).
4.  Un bot√≥n (CTA) claro que dice 'Ver Informe Detallado' o 'Explorar Carreras'.

Estilo y Paleta:
-   Fondo: Gris muy oscuro o azul noche (#12182B).
-   Texto: Blanco y gris claro.
-   Acentos: Cian brillante (#00E0FF) o dorado (#FFD700) para gr√°ficos y botones.
-   Dise√±o limpio, minimalista, con mucho espacio negativo.
-   Alta fidelidad, mockup de UI/UX, fotorrealista.
"""
# --- FIN DE CORRECCI√ìN 3 ---

