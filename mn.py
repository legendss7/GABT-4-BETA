import streamlit as st
import pandas as pd
import numpy as np
import base64

# --- CONFIGURACI√ìN E INICIALIZACI√ìN ---
st.set_page_config(layout="wide", page_title="Bater√≠a de Aptitudes GATB Profesional")

# Mapeo de Aptitudes y Colores para el display
APTITUDES_MAP = {
    "Razonamiento General": {"code": "G", "color": "orange"},
    "Razonamiento Verbal": {"code": "V", "color": "blue"},
    "Razonamiento Num√©rico": {"code": "N", "color": "green"},
    "Razonamiento Espacial": {"code": "S", "color": "red"},
    "Velocidad Perceptiva": {"code": "P", "color": "purple"},
    "Precisi√≥n Manual": {"code": "Q", "color": "cyan"},
    "Coordinaci√≥n Manual": {"code": "K", "color": "magenta"},
    "Atenci√≥n Concentrada": {"code": "A", "color": "lime"},
    "Razonamiento Mec√°nico": {"code": "M", "color": "teal"},
    "Razonamiento Abstracto": {"code": "R", "color": "yellow"},
    "Razonamiento Clerical": {"code": "C", "color": "pink"},
    "Razonamiento T√©cnico": {"code": "T", "color": "brown"},
}
AREAS = list(APTITUDES_MAP.keys())
N_PREGUNTAS_POR_AREA = 12

# Sistema de Clasificaci√≥n por Percentil (SIMULADO)
def clasificar_percentil(porcentaje):
    """Convierte el porcentaje de acierto en un percentil simulado y clasificaci√≥n."""
    if porcentaje >= 90:
        return 96, "Muy Alto üü¢"
    elif porcentaje >= 70:
        return 85, "Alto ‚¨ÜÔ∏è"
    elif porcentaje >= 30:
        return 50, "Promedio üü†"
    elif porcentaje >= 10:
        return 20, "Bajo ‚¨áÔ∏è"
    else:
        return 5, "Muy Bajo üîª"

# Funci√≥n para generar interpretaci√≥n detallada y animada (en HTML/CSS)
def obtener_interpretacion(percentil, area_code, area_name):
    """Genera una interpretaci√≥n detallada y formateada basada en el percentil y el c√≥digo de √°rea."""
    interpretacion_base = {
        "G": "Capacidad para percibir y comprender relaciones, aprender y emitir juicios. Es el factor 'g' de la inteligencia, clave para el √©xito en cualquier campo.",
        "V": "Habilidad para entender ideas expresadas en palabras, dominar vocabulario y redactar informes. Esencial para la comunicaci√≥n eficaz.",
        "N": "Rapidez y precisi√≥n para trabajar con n√∫meros, realizar c√°lculos y resolver problemas matem√°ticos. Crucial en finanzas y an√°lisis de datos.",
        "S": "Habilidad para percibir formas en dos o tres dimensiones, rotar objetos mentalmente y visualizar relaciones espaciales. Importante en dise√±o e ingenier√≠a.",
        "P": "Rapidez para ver detalles en un objeto o tabla, realizar comparaciones y detectar peque√±as diferencias. Fundamental para el control de calidad.",
        "Q": "Destreza y coordinaci√≥n fina de los dedos y las manos, necesaria para ensamblar piezas peque√±as o manipular instrumentos. T√≠pica de la cirug√≠a o la relojer√≠a.",
        "K": "Habilidad para coordinar movimientos oculares y manuales, controlando la mano con precisi√≥n. Importante en deportes, conducci√≥n y mecanograf√≠a.",
        "A": "Capacidad de mantener la atenci√≥n en una tarea mon√≥tona o repetitiva durante per√≠odos prolongados, minimizando errores. Clave en roles de auditor√≠a o ingreso de datos.",
        "M": "Comprensi√≥n de principios f√≠sicos b√°sicos, m√°quinas simples, fuerzas y movimiento. Esencial para t√©cnicos, mec√°nicos y operarios de maquinaria.",
        "R": "Capacidad para descubrir patrones y relaciones en figuras no verbales o simb√≥licas, crucial para la l√≥gica pura y la programaci√≥n.",
        "C": "Rapidez y precisi√≥n para observar detalles verbales y num√©ricos, como en la clasificaci√≥n, archivo y verificaci√≥n de documentos. T√≠pico de roles administrativos.",
        "T": "Aplicaci√≥n de la l√≥gica y principios para identificar fallas, dise√±ar soluciones o seguir procesos t√©cnicos complejos. Combina G, S, y M.",
    }
    
    base_text = interpretacion_base.get(area_code, f"Mide una habilidad cognitiva o motriz espec√≠fica.")

    if percentil >= 90:
        color_bg = "#38c172"  # Verde brillante (Muy Alto)
        color_text = "white"
        title = "üü¢ Fortaleza Excepcional"
        detalle = f"Su desempe√±o supera a m√°s del 90% de la poblaci√≥n. Esta aptitud es una **ventaja competitiva** que debe ser el foco de su carrera. Demuestra una **alta facilidad y eficiencia** para el aprendizaje y la ejecuci√≥n de tareas relacionadas con **{area_name}**. ({base_text})"
    elif percentil >= 70:
        color_bg = "#6cb2eb"  # Azul claro (Alto)
        color_text = "white"
        title = "‚¨ÜÔ∏è Nivel Superior al Promedio"
        detalle = f"Posee una capacidad s√≥lida que lo sit√∫a en el cuartil superior. Puede manejar tareas de complejidad media-alta de forma aut√≥noma. Es un recurso valioso en actividades que requieran **{area_name}**. ({base_text})"
    elif percentil >= 30:
        color_bg = "#ff9900"  # Naranja (Promedio)
        color_text = "white"
        title = "üü† Nivel Promedio"
        detalle = f"Su capacidad es consistente con la media de la poblaci√≥n. Puede desempe√±ar roles sin mayores dificultades, pero el desarrollo continuo ser√° clave si el puesto exige un alto dominio de **{area_name}**. ({base_text})"
    elif percentil >= 10:
        color_bg = "#e3342f"  # Rojo (Bajo)
        color_text = "white"
        title = "‚¨áÔ∏è √Årea de Oportunidad"
        detalle = f"El desempe√±o se encuentra por debajo del promedio. Las tareas dependientes de **{area_name}** pueden ser desafiantes. Se sugiere **entrenamiento espec√≠fico** o buscar roles donde esta aptitud sea menos cr√≠tica. ({base_text})"
    else:
        color_bg = "#490705"  # Rojo Oscuro (Muy Bajo)
        color_text = "white"
        title = "üîª Necesidad Cr√≠tica de Soporte"
        detalle = f"El rendimiento est√° muy por debajo del est√°ndar. La exposici√≥n a tareas de alta demanda en **{area_name}** debe ser minimizada y acompa√±ada de un **plan de desarrollo intensivo**. ({base_text})"
        
    return f"""
        <div style="background-color: {color_bg}; padding: 20px; border-radius: 12px; color: {color_text}; margin-bottom: 15px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); transition: all 0.3s ease-in-out;">
            <h4 style="margin-top: 0; color: {color_text};">{title} - {area_name} ({area_code})</h4>
            <p style="font-size: 0.9em; margin-bottom: 0;">**Percentil:** {percentil}</p>
            <p style="font-size: 0.9em; margin-bottom: 0;">{detalle}</p>
        </div>
    """

# Funci√≥n para la Calificaci√≥n Global
def calificar_global(avg_percentil):
    """Asigna una calificaci√≥n general al perfil basado en el percentil promedio."""
    if avg_percentil >= 85:
        return "Potencial Ejecutivo üåü", "El perfil indica un potencial excepcionalmente alto y equilibrado para roles directivos, estrat√©gicos y de alta complejidad. Capacidad de aprendizaje superior y adaptaci√≥n r√°pida a cualquier entorno.", "#008000" # Green
    elif avg_percentil >= 65:
        return "Nivel Profesional Avanzado üèÜ", "El perfil es s√≥lido, con fortalezas claras y un buen balance aptitudinal. Excelente para roles t√©cnicos especializados, de gesti√≥n de proyectos y consultor√≠a.", "#4682b4" # Steel Blue
    elif avg_percentil >= 40:
        return "Perfil Competitivo üíº", "El perfil se sit√∫a en el promedio superior, demostrando suficiencia en todas las √°reas. Apto para la mayor√≠a de roles operativos y de coordinaci√≥n. Requiere enfoque en el desarrollo de fortalezas clave.", "#ff8c00" # Dark Orange
    else:
        return "Per√≠odo de Desarrollo üõ†Ô∏è", "El perfil requiere un per√≠odo de enfoque intensivo en el desarrollo de aptitudes clave. Se recomienda comenzar con roles de soporte y entrenamiento continuo.", "#dc143c" # Crimson

# Funci√≥n para forzar el scroll al inicio de la p√°gina
def js_scroll_to_top():
    """Injecta JS para forzar el scroll al inicio de la p√°gina."""
    # Este c√≥digo de JS es agresivo y apunta al contenedor principal de Streamlit para garantizar el scroll
    js_code = """
    <script>
        try {
            const mainContainer = window.parent.document.querySelector('.main');
            if (mainContainer) {
                mainContainer.scrollTop = 0;
            } else {
                document.documentElement.scrollTop = 0;
                document.body.scrollTop = 0;
            }
        } catch (e) {
            console.error("No se pudo forzar el scroll:", e);
        }
    </script>
    """
    st.html(js_code)


# --- 2. DEFINICI√ìN DEL TEST (144 Items) ---

PREGUNTAS_GATB = []
current_id = 1

for area, data in APTITUDES_MAP.items():
    code = data['code']
    
    for i in range(1, N_PREGUNTAS_POR_AREA + 1):
        pregunta = f"[{code}-{i}] "
        opciones = {"a": "Opci√≥n A", "b": "Opci√≥n B", "c": "Opci√≥n C", "d": "Opci√≥n D"}
        respuesta = "c" # Respuesta por defecto
        
        # --- Preguntas espec√≠ficas y descriptivas (M√°ximo 4 por √°rea) ---
        if code == "G": # Razonamiento General
            if i == 1:
                pregunta += "Si todos los A son B y ning√∫n C es A, ¬øqu√© se puede concluir l√≥gicamente?"
                opciones = {"a": "Ning√∫n B es C", "b": "Algunos B son C", "c": "Algunos B no son C", "d": "Todos los C son B"}
                respuesta = "c"
            elif i == 2:
                pregunta += "El concepto 'Dedo' es a 'Mano' como 'Hoja' es a..."
                opciones = {"a": "Planta", "b": "√Årbol", "c": "Ra√≠z", "d": "Flor"}
                respuesta = "b"
            elif i == 3:
                pregunta += "Encuentra el n√∫mero que contin√∫a la serie: 1, 4, 9, 16, 25, ..."
                opciones = {"a": "30", "b": "32", "c": "36", "d": "40"}
                respuesta = "c"
            else:
                pregunta += f"Resuelve este problema de razonamiento sint√©tico-anal√≠tico o analog√≠a de alto nivel (√çtem {i})."

        elif code == "V": # Razonamiento Verbal
            if i == 1:
                pregunta += "¬øCu√°l es el sin√≥nimo de 'UBICUO'?"
                opciones = {"a": "Raro", "b": "Presente en todas partes", "c": "Imposible", "d": "Fugaz"}
                respuesta = "b"
            elif i == 2:
                pregunta += "¬øCu√°l es el ant√≥nimo de 'PERSPICACIA'?"
                opciones = {"a": "Agudeza", "b": "Lentitud", "c": "Torpeza", "d": "Claridad"}
                respuesta = "c"
            elif i == 3:
                pregunta += "Define la palabra 'PARADIGMA'."
                opciones = {"a": "Error", "b": "Ejemplo o modelo", "c": "Teor√≠a compleja", "d": "Argumento falso"}
                respuesta = "b"
            else:
                pregunta += f"Identifica la relaci√≥n de significado o completa la oraci√≥n con el mejor t√©rmino (√çtem {i})."

        elif code == "N": # Razonamiento Num√©rico
            if i == 1:
                pregunta += "Serie: 7, 14, 21, 28, ¬øCu√°l sigue?"
                opciones = {"a": "30", "b": "35", "c": "40", "d": "42"}
                respuesta = "b"
            elif i == 2:
                pregunta += "Si un art√≠culo cuesta $45 y tiene un descuento del 20%, ¬øcu√°l es su precio final?"
                opciones = {"a": "$36.00", "b": "$38.00", "c": "$40.00", "d": "$42.00"}
                respuesta = "a"
            elif i == 3:
                pregunta += "Calcula el resultado de la siguiente operaci√≥n: $15 \times 5 - (10 + 5) / 3$."
                opciones = {"a": "70", "b": "75", "c": "80", "d": "85"}
                respuesta = "a"
            else:
                pregunta += f"Resuelve un problema de c√°lculo, serie o secuencia num√©rica con velocidad (√çtem {i})."

        elif code == "S": # Razonamiento Espacial
            if i == 1:
                pregunta += "Observa la figura de la izquierda. ¬øCu√°l de las opciones muestra la figura rotada 90 grados a la derecha? "
                opciones = {"a": "Figura A (rotada)", "b": "Figura B (reflejada)", "c": "Figura C (incorrecta)", "d": "Figura D (original)"}
                respuesta = "a"
            elif i == 2:
                pregunta += "Si doblas la plantilla que se muestra, ¬øcu√°l cubo se forma? "
                opciones = {"a": "Cubo 1", "b": "Cubo 2", "c": "Cubo 3", "d": "Cubo 4"}
                respuesta = "c"
            elif i == 3:
                pregunta += "Identifica qu√© figura bidimensional resulta de cortar el objeto tridimensional que se muestra. "
                opciones = {"a": "C√≠rculo", "b": "Cuadrado", "c": "Tri√°ngulo", "d": "Elipse"}
                respuesta = "c"
            else:
                pregunta += f"Visualiza la manipulaci√≥n o la relaci√≥n de figuras geom√©tricas complejas (√çtem {i})."

        elif code == "P": # Velocidad Perceptiva
            if i == 1:
                pregunta += "Marca el par de n√∫meros que son *diferentes*: (A) 59281 - 59281, (B) 60742 - 60724, (C) 11905 - 11905, (D) 34678 - 34678."
                opciones = {"a": "(A)", "b": "(B)", "c": "(C)", "d": "(D)"}
                respuesta = "b"
            elif i == 2:
                pregunta += "En la siguiente lista, ¬øcu√°ntas veces aparece el patr√≥n 'BRT'?: RTBBRTRTBBTRRTBBRTRBBTRBRTBRTTBTR"
                opciones = {"a": "3", "b": "4", "c": "5", "d": "6"}
                respuesta = "b"
            elif i == 3:
                pregunta += "Compara la siguiente lista de nombres de productos y marca el par *id√©ntico*: (A) Cerveza Negra M. / Cerveza Negra M., (B) Leche Entera V. / Leche Entera N., (C) Jugo Tropical 500 / Jugo Tropikal 500."
                opciones = {"a": "(A)", "b": "(B)", "c": "(C)", "d": "(D) Ninguno"}
                respuesta = "a"
            else:
                pregunta += f"Compara r√°pidamente detalles, nombres o c√≥digos con alta precisi√≥n bajo limitaci√≥n de tiempo (√çtem {i})."

        elif code == "Q": # Precisi√≥n Manual (Simulado)
             if i == 1:
                pregunta += "Si estuvieras ensamblando una pieza min√∫scula, ¬øqu√© movimiento reflejar√≠a m√°s precisi√≥n?"
                opciones = {"a": "Movimiento de todo el brazo", "b": "Solo movimientos de la mu√±eca", "c": "Movimientos controlados de los dedos", "d": "Movimiento r√°pido del codo"}
                respuesta = "c"
             elif i == 2:
                pregunta += "Imagina que debes enhebrar 100 agujas. ¬øCu√°l ser√≠a el mayor reto a tu *precisi√≥n*?"
                opciones = {"a": "El tiempo", "b": "La fatiga visual", "c": "La coordinaci√≥n ojo-mano", "d": "El ruido ambiente"}
                respuesta = "b"
             elif i == 3:
                pregunta += "Este √≠tem mide la destreza fina. ¬øQu√© acci√≥n requiere un mayor grado de delicadeza y control muscular fino?"
                opciones = {"a": "Martillar un clavo", "b": "Escribir con un l√°piz", "c": "Cortar papel con tijeras", "d": "Mover una caja pesada"}
                respuesta = "b"
             else:
                pregunta += f"Eval√∫a la capacidad te√≥rica para manipular herramientas o piezas que requieren destreza fina (√çtem {i})."
        
        elif code == "K": # Coordinaci√≥n Manual (Simulado)
             if i == 1:
                pregunta += "Al escribir en un teclado, la habilidad que predomina es la coordinaci√≥n..."
                opciones = {"a": "Ojo-pie", "b": "Ojo-mano", "c": "Espacio-cabeza", "d": "Fuerza-pulso"}
                respuesta = "b"
             elif i == 2:
                pregunta += "Si debes conducir un veh√≠culo en reversa, esta aptitud se pone a prueba al coordinar:"
                opciones = {"a": "Volante y acelerador", "b": "Espejos y clutch", "c": "Ojos, manos y pedales", "d": "Solo el freno"}
                respuesta = "c"
             elif i == 3:
                pregunta += "Este √≠tem mide la habilidad para guiar movimientos manuales. ¬øCu√°l es un ejemplo de alta demanda de K?"
                opciones = {"a": "Leer un libro", "b": "Patear una pelota", "c": "Realizar una cirug√≠a", "d": "Contestar el tel√©fono"}
                respuesta = "c"
             else:
                pregunta += f"Eval√∫a la coordinaci√≥n de movimientos gruesos y controlados con la percepci√≥n visual (√çtem {i})."

        elif code == "A": # Atenci√≥n Concentrada
            if i == 1:
                pregunta += "En la siguiente secuencia de letras y n√∫meros, ¬øcu√°ntas veces aparece '5T' seguido de 'A'?: 15TA 5TT A5T 5TA 75T A5TA 5TA 9A5T"
                opciones = {"a": "2", "b": "3", "c": "4", "d": "5"}
                respuesta = "b"
            elif i == 2:
                pregunta += "Si mantienes la concentraci√≥n por 30 minutos sin interrupci√≥n, ¬øqu√© aspecto de esta aptitud est√°s demostrando?"
                opciones = {"a": "Velocidad Perceptiva", "b": "Precisi√≥n Manual", "c": "Persistencia Atencional", "d": "Razonamiento General"}
                respuesta = "c"
            elif i == 3:
                pregunta += "Este test requiere mantener el enfoque en una tarea de discriminaci√≥n visual. ¬øQu√© factor influye m√°s en tu rendimiento?"
                opciones = {"a": "El conocimiento previo", "b": "La motivaci√≥n", "c": "La calidad del sue√±o", "d": "La temperatura ambiente"}
                respuesta = "c"
            else:
                pregunta += f"Verifica y compara datos bajo presi√≥n de tiempo y enfoque para detectar errores sutiles (√çtem {i})."

        elif code == "M": # Razonamiento Mec√°nico
            if i == 1:
                pregunta += "En el sistema de palanca que se muestra, ¬øen qu√© punto aplicar√≠as menos fuerza para levantar la carga? "
                opciones = {"a": "Cerca del fulcro", "b": "Lejos del fulcro", "c": "Directamente sobre la carga", "d": "La fuerza es constante"}
                respuesta = "b"
            elif i == 2:
                pregunta += "Si la polea A gira en sentido horario, ¬øen qu√© sentido girar√° la polea C en el siguiente engranaje (A -> B -> C)? "
                opciones = {"a": "Horario", "b": "Antihorario", "c": "Permanece est√°tica", "d": "Depende de la fricci√≥n"}
                respuesta = "a"
            elif i == 3:
                pregunta += "¬øQu√© ley de la f√≠sica explica por qu√© una bicicleta se mantiene en pie mientras se mueve?"
                opciones = {"a": "Ley de Ohm", "b": "Fuerza centr√≠peta", "c": "Efecto girosc√≥pico", "d": "Principio de Arqu√≠medes"}
                respuesta = "c"
            else:
                pregunta += f"Aplica principios de f√≠sica, m√°quinas o herramientas para resolver un problema de funcionamiento (√çtem {i})."

        elif code == "R": # Razonamiento Abstracto
            if i == 1:
                pregunta += "Encuentra la figura que contin√∫a la secuencia: C√≠rculo, Cuadrado, Tri√°ngulo, C√≠rculo, Cuadrado,..."
                opciones = {"a": "C√≠rculo", "b": "Pent√°gono", "c": "Tri√°ngulo", "d": "Cuadrado"}
                respuesta = "c"
            elif i == 2:
                pregunta += "Identifica el patr√≥n de la serie de figuras. "
                opciones = {"a": "Rotaci√≥n de 45 grados", "b": "Suma de elementos", "c": "Inversi√≥n de color", "d": "Patr√≥n de 3 elementos"}
                respuesta = "d"
            elif i == 3:
                pregunta += "¬øQu√© figura es diferente a las otras tres? "
                opciones = {"a": "Figura A", "b": "Figura B", "c": "Figura C", "d": "Figura D"}
                respuesta = "b"
            else:
                pregunta += f"Descubre la regla l√≥gica o el patr√≥n en figuras o s√≠mbolos no verbales o simb√≥licos (√çtem {i})."
        
        elif code == "C": # Razonamiento Clerical
            if i == 1:
                pregunta += "Compara las dos columnas de c√≥digos de producto. ¬øCu√°ntos pares son ID√âNTICOS?: **Columna 1:** 4078-BC | 913-Z | 500-112Y **Columna 2:** 4078-BG | 913-Z | 500-121Y"
                opciones = {"a": "0", "b": "1", "c": "2", "d": "3"}
                respuesta = "b"
            elif i == 2:
                pregunta += "Identifica el nombre escrito de forma incorrecta: (A) Mar√≠a L√≥pez G√≥mez, (B) Jos√© Martinez F√©rnandez, (C) Ana P√©rez Ru√≠z, (D) Carlos S√°nchez D√≠az."
                opciones = {"a": "(A)", "b": "(B)", "c": "(C)", "d": "(D) Todos correctos"}
                respuesta = "b"
            elif i == 3:
                pregunta += "Si debes archivar una carpeta, ¬øqu√© elemento usar√≠as para clasificarla alfab√©ticamente?"
                opciones = {"a": "El a√±o de creaci√≥n", "b": "El color de la carpeta", "c": "El apellido del responsable", "d": "El peso del contenido"}
                respuesta = "c"
            else:
                pregunta += f"Verifica y clasifica informaci√≥n administrativa y de oficina con rapidez y precisi√≥n (√çtem {i})."
        
        elif code == "T": # Razonamiento T√©cnico
             if i == 1:
                pregunta += "Si una bomba hidr√°ulica funciona mal, ¬øcu√°l es el primer paso en el proceso de soluci√≥n de problemas t√©cnicos (troubleshooting)?"
                opciones = {"a": "Desmontar la bomba", "b": "Verificar la presi√≥n de entrada", "c": "Reemplazar la bomba", "d": "Consultar el manual del usuario"}
                respuesta = "d"
             elif i == 2:
                pregunta += "En un diagrama de flujo de proceso, ¬øqu√© forma geom√©trica representa una decisi√≥n?"
                opciones = {"a": "Rect√°ngulo", "b": "√ìvalo", "c": "Rombo", "d": "Flecha"}
                respuesta = "c"
             elif i == 3:
                pregunta += "Para determinar la resistencia el√©ctrica de un circuito, ¬øqu√© ley es fundamental aplicar?"
                opciones = {"a": "Ley de Newton", "b": "Ley de Boyle", "c": "Ley de Ohm", "d": "Ley de Moore"}
                respuesta = "c"
             else:
                pregunta += f"Aplica la l√≥gica a sistemas t√©cnicos, diagramas o manuales de procedimientos (√çtem {i})."

        PREGUNTAS_GATB.append({
            "id": current_id, 
            "area": area,
            "code": code,
            "pregunta": pregunta, 
            "opciones": opciones, 
            "respuesta_correcta": respuesta
        })
        current_id += 1

df_preguntas = pd.DataFrame(PREGUNTAS_GATB)
N_TOTAL_PREGUNTAS = len(df_preguntas)


# --- 3. FUNCIONES DE ESTADO Y NAVEGACI√ìN ---

# Inicializaci√≥n de Session State (Agregado 'is_navigating' para el fix del doble click)
if 'stage' not in st.session_state: st.session_state.stage = 'inicio'
if 'respuestas' not in st.session_state: st.session_state.respuestas = {}
if 'area_actual_index' not in st.session_state: st.session_state.area_actual_index = 0
if 'is_navigating' not in st.session_state: st.session_state.is_navigating = False

def set_stage(new_stage):
    """Cambia la etapa de la aplicaci√≥n, desbloquea la navegaci√≥n y fuerza el scroll."""
    st.session_state.stage = new_stage
    st.session_state.is_navigating = False # Desbloquear
    js_scroll_to_top() # Forzar scroll

def siguiente_area():
    """Avanza a la siguiente √°rea o finaliza el test."""
    st.session_state.is_navigating = True # Bloquear inmediatamente al presionar el bot√≥n
    
    # 2. Navegar
    if st.session_state.area_actual_index < len(AREAS) - 1:
        st.session_state.area_actual_index += 1
        set_stage('test_activo')
    else:
        # √öltima √°rea, calcular y mostrar resultados
        calcular_resultados()
        set_stage('resultados')

def calcular_resultados():
    """Calcula y almacena los resultados finales."""
    resultados_data = []
    
    for area in AREAS:
        preguntas_area = df_preguntas[df_preguntas['area'] == area]
        total_area = len(preguntas_area)
        aciertos_area = 0

        for index, row in preguntas_area.iterrows():
            pregunta_id = row['id']
            respuesta_usuario = st.session_state.respuestas.get(pregunta_id)
            
            if respuesta_usuario == row['respuesta_correcta']:
                aciertos_area += 1
        
        # C√°lculo de m√©tricas
        porcentaje = (aciertos_area / total_area) * 100 if total_area > 0 else 0
        percentil, clasificacion_texto = clasificar_percentil(porcentaje)
        
        resultados_data.append({
            "√Årea": area,
            "C√≥digo": APTITUDES_MAP[area]["code"],
            "Puntuaci√≥n Bruta": aciertos_area,
            "M√°xima Puntuaci√≥n": total_area,
            "Porcentaje (%)": f"{porcentaje:.1f}%",
            "Percentil (Simulado)": percentil,
            "Clasificaci√≥n": clasificacion_texto,
            "Color": APTITUDES_MAP[area]["color"]
        })
    
    st.session_state.resultados_df = pd.DataFrame(resultados_data)
    st.session_state.is_navigating = False # Desbloquear despu√©s de calcular


# --- 4. VISTAS DE STREAMLIT ---

def vista_inicio():
    """Muestra la p√°gina de inicio e instrucciones."""
    st.title("üß† Bater√≠a de Aptitudes Generales ‚Äì GATB Profesional")
    st.header("Evaluaci√≥n Estructurada de 12 Factores Aptitudinales")
    
    st.markdown("---")
    
    col1, col2 = st.columns([2, 1])

    with col1:
        st.info(f"""
        **üéØ Objetivo:** Medir 12 factores clave de aptitud, siguiendo la estructura del General Aptitude Test Battery (GATB).
        
        **üìã Estructura del Test:**
        - **Total de Secciones:** **{len(AREAS)}**
        - **Preguntas por Secci√≥n:** **{N_PREGUNTAS_POR_AREA}**
        - **Total de √çtems:** **{N_TOTAL_PREGUNTAS}**
        
        **üìù Instrucciones:**
        1.  Responda cada pregunta seleccionando la opci√≥n que considere correcta.
        2.  Su respuesta se guardar√° autom√°ticamente.
        3.  Use el bot√≥n "Siguiente Secci√≥n" para avanzar.
        """)
    
    with col2:
        st.subheader("Simulaci√≥n Profesional")
        st.warning("‚ö†Ô∏è **Nota:** Esta es una simulaci√≥n de la estructura del GATB. Las clasificaciones (Percentil) son **ilustrativas** y no representan las tablas de estandarizaci√≥n reales del test.")
        
        # Uso del estado de navegaci√≥n para evitar doble click
        if st.button("üöÄ Iniciar Evaluaci√≥n", type="primary", use_container_width=True, disabled=st.session_state.is_navigating):
            st.session_state.area_actual_index = 0
            set_stage('test_activo')

    st.markdown("---")
    st.subheader("Resumen de √Åreas de Aptitud")
    
    # Mostrar las √°reas en columnas para una vista limpia
    cols = st.columns(3)
    for i, area in enumerate(AREAS):
        col = cols[i % 3]
        col.markdown(f"**{APTITUDES_MAP[area]['code']} - {area}**")

def vista_test_activo():
    """Muestra la secci√≥n de preguntas del √°rea actual."""
    
    area_actual = AREAS[st.session_state.area_actual_index]
    total_areas = len(AREAS)
    current_area_index = st.session_state.area_actual_index
    progress_percentage = (current_area_index + 1) / total_areas

    # --- Cabecera y Barra de Progreso ---
    st.title(f"Secci√≥n {current_area_index + 1} de {total_areas}: {area_actual}")
    st.progress(progress_percentage, text=f"Progreso General: **{area_actual}** ({APTITUDES_MAP[area_actual]['code']})")
    st.markdown("---")
    
    # Filtrar las preguntas para el √°rea actual
    preguntas_area = df_preguntas[df_preguntas['area'] == area_actual]
    
    # Contenedor para las preguntas
    with st.container(border=True):
        st.subheader(f"Instrucciones: Responda a los {N_PREGUNTAS_POR_AREA} √≠tems de {area_actual}")
        
        q_num = 1 # Contador local para la pregunta dentro de la secci√≥n
        for index, row in preguntas_area.iterrows():
            pregunta_id = row['id']
            
            # Crear la lista de opciones para el radio
            opciones_radio = [f"{k}) {v}" for k, v in row['opciones'].items()]
            
            # Recuperar la respuesta anterior si existe
            default_value_key = st.session_state.respuestas.get(pregunta_id)
            
            # Determinar el √≠ndice de la respuesta guardada
            try:
                # Buscamos la clave (a, b, c, d) de la respuesta guardada
                keys_list = list(row['opciones'].keys())
                default_index = keys_list.index(default_value_key)
            except (ValueError, AttributeError):
                default_index = None # No seleccionada

            # Contenedor para cada pregunta con un borde visual
            with st.container(border=True):
                # Determinar si la pregunta requiere imagen
                pregunta_texto = row['pregunta']
                
                # Muestra el n√∫mero de pregunta local y el texto de la pregunta
                st.markdown(f"**Pregunta {q_num}.**") 
                
                if '[Image of' in pregunta_texto:
                    image_tag_start = pregunta_texto.find('[Image of')
                    image_tag_end = pregunta_texto.find(']', image_tag_start)
                    image_tag = pregunta_texto[image_tag_start:image_tag_end+1]
                    
                    st.markdown(pregunta_texto.replace(image_tag, ''))
                    st.markdown(f"*(**EST√çMULO VISUAL REQUERIDO**)*")
                    st.markdown(image_tag) # Mostrar el placeholder de la imagen
                else:
                    st.markdown(pregunta_texto)

                # Callback para guardar la respuesta inmediatamente al seleccionar
                def on_radio_change(q_id):
                    selected_option_full = st.session_state[f'q_{q_id}']
                    # Extraer solo la clave (a, b, c, d)
                    selected_key = selected_option_full.split(')')[0]
                    st.session_state.respuestas[q_id] = selected_key
                
                # Radio Button
                st.radio(
                    f"Respuesta {row['code']}-{q_num}:", 
                    opciones_radio, 
                    key=f'q_{pregunta_id}', 
                    index=default_index,
                    on_change=on_radio_change,
                    args=(pregunta_id,)
                )
            
            q_num += 1 # Incrementar contador local
    
    st.markdown("---")

    # Bot√≥n para pasar a la siguiente secci√≥n / finalizar (Deshabilitado si est√° navegando)
    if st.session_state.area_actual_index < len(AREAS) - 1:
        next_area_name = AREAS[st.session_state.area_actual_index + 1]
        submit_label = f"‚û°Ô∏è Siguiente Secci√≥n: {next_area_name}"
    else:
        submit_label = "‚úÖ Finalizar Test y Generar Informe"

    st.button(
        submit_label, 
        type="primary", 
        on_click=siguiente_area, 
        use_container_width=True,
        disabled=st.session_state.is_navigating # Control de doble click
    )

def vista_resultados():
    """Muestra el informe de resultados profesional con calificaci√≥n global y detalles extendidos."""
    js_scroll_to_top() # Forzar scroll al cargar resultados

    st.title("üìÑ Informe de Resultados GATB Profesional")
    st.header("Perfil Aptitudinal Detallado")
    
    df_resultados = st.session_state.resultados_df

    st.markdown("---")
    
    # --- 1. Calificaci√≥n Global (Nueva Secci√≥n) ---
    df_resultados['Percentil Num'] = df_resultados['Percentil (Simulado)'].astype(int)
    avg_percentil = df_resultados['Percentil Num'].mean()
    
    calificacion, detalle_calificacion, color_calificacion = calificar_global(avg_percentil)

    st.subheader("üìä Calificaci√≥n Global del Perfil")
    
    st.markdown(f"""
    <div style="background-color: {color_calificacion}; padding: 25px; border-radius: 15px; color: white; margin-bottom: 20px; text-align: center; box-shadow: 0 6px 10px rgba(0,0,0,0.2);">
        <h2 style="margin: 0; font-size: 2em;">{calificacion}</h2>
        <p style="margin: 5px 0 10px 0; font-size: 1.1em; font-weight: 500;">Percentil Promedio: {avg_percentil:.1f}</p>
        <p style="font-size: 0.9em; margin: 0; border-top: 1px solid rgba(255,255,255,0.3); padding-top: 10px;">{detalle_calificacion}</p>
    </div>
    """, unsafe_allow_html=True)
    
    # --- 2. An√°lisis Consolidado (Existente, pero movido) ---
    st.subheader("Sumario Ejecutivo por Aptitud")
    
    mejor_area = df_resultados.loc[df_resultados['Percentil Num'].idxmax()]
    peor_area = df_resultados.loc[df_resultados['Percentil Num'].idxmin()]

    col_mejor, col_peor = st.columns(2)

    with col_mejor:
        st.success(f"""
        **üöÄ Mayor Fortaleza:** **{mejor_area['√Årea']}** ({mejor_area['C√≥digo']})
        - **Clasificaci√≥n:** {mejor_area['Clasificaci√≥n']}
        - **Percentil:** {mejor_area['Percentil (Simulado)']}
        - *Recomendaci√≥n: Excelente potencial para roles que exijan esta aptitud.*
        """)
    
    with col_peor:
        st.error(f"""
        **üöß √Årea de Oportunidad:** **{peor_area['√Årea']}** ({peor_area['C√≥digo']})
        - **Clasificaci√≥n:** {peor_area['Clasificaci√≥n']}
        - **Percentil:** {peor_area['Percentil (Simulado)']}
        - *Recomendaci√≥n: Se sugiere entrenamiento o asignaci√≥n a roles menos dependientes de esta habilidad.*
        """)

    st.markdown("---")
    
    # --- 3. Tabla de Resultados Detallada (Profesional) ---
    st.subheader("Tabla de Puntuaciones y Clasificaci√≥n")
    
    # Estilos de celda para la clasificaci√≥n
    def highlight_classification(s):
        if 'Muy Alto' in s['Clasificaci√≥n'] or 'Alto' in s['Clasificaci√≥n']:
            return ['background-color: #d4edda'] * len(s) # Verde claro
        elif 'Bajo' in s['Clasificaci√≥n'] or 'Muy Bajo' in s['Clasificaci√≥n']:
            return ['background-color: #f8d7da'] * len(s) # Rojo claro
        else:
            return [''] * len(s)

    df_display = df_resultados.copy()
    df_display = df_display[['C√≥digo', '√Årea', 'Puntuaci√≥n Bruta', 'M√°xima Puntuaci√≥n', 'Porcentaje (%)', 'Percentil (Simulado)', 'Clasificaci√≥n']]
    
    st.dataframe(
        df_display.style.apply(highlight_classification, axis=1),
        use_container_width=True,
        hide_index=True,
        column_config={
            "Puntuaci√≥n Bruta": st.column_config.NumberColumn("Puntaje Bruto", format="%d"),
            "M√°xima Puntuaci√≥n": st.column_config.NumberColumn("M√°x. Puntuaci√≥n", format="%d"),
        }
    )
    
    st.markdown("---")
    
    # --- 4. Interpretaci√≥n Detallada por Aptitud (Extensa y Animada) ---
    st.subheader("An√°lisis Individual por Aptitud (Extenso)")
    st.info("A continuaci√≥n, se presenta el an√°lisis de cada aptitud, clasificando su potencial y ofreciendo recomendaciones basadas en el percentil obtenido (Simulado).")
    
    for index, row in df_resultados.sort_values(by='Percentil Num', ascending=False).iterrows():
        interpretacion_html = obtener_interpretacion(
            row['Percentil Num'],
            row['C√≥digo'],
            row['√Årea']
        )
        # Mostrar la interpretaci√≥n con formato HTML/CSS (animaci√≥n visual)
        st.markdown(interpretacion_html, unsafe_allow_html=True)
        
    st.markdown("---")

    with st.expander("Glosario de Resultados y Clasificaci√≥n", expanded=False):
        st.markdown(f"""
        - **Puntuaci√≥n Bruta:** N√∫mero de aciertos en un √°rea (M√°x. {N_PREGUNTAS_POR_AREA}).
        - **Percentil (Simulado):** Indica el porcentaje de la poblaci√≥n de referencia que obtuvo una puntuaci√≥n igual o inferior a la suya.
        - **Calificaci√≥n Global:** Interpretaci√≥n de su perfil general basado en el promedio de sus percentiles.
        """)

    st.markdown("---")
    
    if st.button("‚è™ Realizar Nueva Evaluaci√≥n", type="secondary"):
        st.session_state.respuestas = {}
        st.session_state.area_actual_index = 0
        set_stage('inicio')


# --- 5. CONTROL DEL FLUJO PRINCIPAL ---

if st.session_state.stage == 'inicio':
    vista_inicio()
elif st.session_state.stage == 'test_activo':
    vista_test_activo()
elif st.session_state.stage == 'resultados':
    vista_resultados()

# --- 6. FOOTER Y ACERCA DE ---
st.markdown("---")
st.markdown("<p style='text-align: center; font-size: small; color: grey;'>Desarrollado para simular la estructura del GATB (General Aptitude Test Battery). Las puntuaciones son ilustrativas y no deben usarse para toma de decisiones sin un profesional cualificado.</p>", unsafe_allow_html=True)
